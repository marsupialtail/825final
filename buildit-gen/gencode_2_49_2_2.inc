#define A_dim (128)
#define B_dim (64)
#define C_dim (3136)
#define Gy_i (2)
#define Gy_d (2)
#define A_blocks (2)
#define C_blocks (49)
#define offsets_size (1024)
float __device__ max_f(float a, float b) {return a>b?a:b;}
static int offsets[] = {0, 3, 10, 12, 23, 24, 36, 36, 42, 43, -1, -1, 49, 50, 53, 55, 76, 76, 85, 87, 98, 100, 113, 117, 128, 129, 136, 139, 157, 158, 166, 169, 177, 177, 186, 187, 206, 207, 218, 224, 240, 241, 245, 249, 271, 272, 277, 278, 281, 282, 292, 293, 299, 301, 306, 310, 332, 335, 342, 344, 366, 367, 371, 372, 379, 379, 382, 384, 404, 406, 423, 424, 435, 436, 444, 445, 461, 461, 482, 482, 487, 490, 512, 515, 526, 528, 549, 556, 575, 577, 588, 591, 607, 608, 612, 613, 628, 628, 634, 635, 644, 645, 662, 664, 667, 667, 682, 683, -1, -1, 687, 691, 705, 706, 717, 718, 726, 727, 742, 743, 747, 749, 765, 769, 785, 788, 809, 811, 3, 6, 12, 15, 24, 25, 36, 38, 43, 45, -1, -1, 50, 50, 55, 58, 76, 77, 87, 87, 100, 103, 117, 119, 129, 130, 139, 141, 158, 159, 169, 172, 177, 178, 187, 187, 207, 208, 224, 225, 241, 241, 249, 251, 272, 273, 278, 278, 282, 285, 293, 293, 301, 303, 310, 315, 335, 335, 344, 344, 367, 368, 372, 373, 379, 379, 384, 386, 406, 409, 424, 426, 436, 437, 445, 447, 461, 463, 482, 483, 490, 494, 515, 516, 528, 529, 556, 558, 577, 578, 591, 595, 608, 610, 613, 615, 628, 631, 635, 636, 645, 646, 664, 664, 667, 669, 683, 684, -1, -1, 691, 694, 706, 706, 718, 719, 727, 730, 743, 744, 749, 752, 769, 771, 788, 791, 811, 812, 6, 8, 15, 16, 25, 26, 38, 38, 45, 46, -1, -1, 50, 51, 58, 62, 77, 77, 87, 88, 103, 107, 119, 121, 130, 132, 141, 143, 159, 161, 172, 172, 178, 178, 187, 189, 208, 208, 225, 226, 241, 242, 251, 255, 273, 273, 278, 279, 285, 286, 293, 293, 303, 305, 315, 317, 335, 335, 344, 348, 368, 369, 373, 374, 379, 379, 386, 388, 409, 413, 426, 428, 437, 439, 447, 449, 463, 466, 483, 483, 494, 498, 516, 519, 529, 533, 558, 562, 578, 578, 595, 599, 610, 610, 615, 616, 631, 632, 636, 638, 646, 650, 664, 664, 669, 672, 684, 684, -1, -1, 694, 695, 706, 709, 719, 720, 730, 731, 744, 745, 752, 753, 771, 773, 791, 792, 812, 813, 8, 9, 16, 17, 26, 26, 38, 38, 46, 46, -1, -1, 51, 52, 62, 67, 77, 78, 88, 88, 107, 108, 121, 121, 132, 133, 143, 145, 161, 163, 172, 174, 178, 180, 189, 195, 208, 212, 226, 227, 242, 244, 255, 256, 273, 273, 279, 279, 286, 286, 293, 294, 305, 305, 317, 319, 335, 336, 348, 355, 369, 369, 374, 374, 379, 380, 388, 391, 413, 415, 428, 428, 439, 441, 449, 450, 466, 472, 483, 483, 498, 502, 519, 521, 533, 539, 562, 563, 578, 582, 599, 602, 610, 610, 616, 619, 632, 632, 638, 639, 650, 654, 664, 665, 672, 673, 684, 686, -1, -1, 695, 698, 709, 710, 720, 722, 731, 733, 745, 745, 753, 756, 773, 776, 792, 795, 813, 813, 9, 9, 17, 17, 26, 27, 38, 40, 46, 47, -1, -1, 52, 53, 67, 70, 78, 80, 88, 91, 108, 109, 121, 122, 133, 134, 145, 150, 163, 163, 174, 174, 180, 181, 195, 198, 212, 214, 227, 231, 244, 244, 256, 259, 273, 274, 279, 279, 286, 287, 294, 295, 305, 305, 319, 324, 336, 337, 355, 358, 369, 369, 374, 375, 380, 381, 391, 394, 415, 415, 428, 430, 441, 442, 450, 453, 472, 477, 483, 484, 502, 504, 521, 521, 539, 543, 563, 567, 582, 582, 602, 604, 610, 610, 619, 623, 632, 632, 639, 640, 654, 657, 665, 666, 673, 675, 686, 686, -1, -1, 698, 701, 710, 712, 722, 722, 733, 734, 745, 745, 756, 760, 776, 779, 795, 799, 813, 814, 9, 9, 17, 18, 27, 31, 40, 40, 47, 47, -1, -1, -1, -1, 70, 74, 80, 81, 91, 94, 109, 112, 122, 125, 134, 134, 150, 153, 163, 164, 174, 174, 181, 184, 198, 201, 214, 217, 231, 234, 244, 245, 259, 264, 274, 274, 279, 279, 287, 288, 295, 295, 305, 305, 324, 325, 337, 338, 358, 361, 369, 369, 375, 375, 381, 381, 394, 398, 415, 419, 430, 430, 442, 443, 453, 454, 477, 478, 484, 484, 504, 507, 521, 523, 543, 544, 567, 569, 582, 583, 604, 604, 610, 610, 623, 626, 632, 633, 640, 643, 657, 660, 666, 667, 675, 678, 686, 686, -1, -1, 701, 703, 712, 713, 722, 722, 734, 737, 745, 745, 760, 761, 779, 782, 799, 804, 814, 817, 9, 9, 18, 20, 31, 34, 40, 40, 47, 49, -1, -1, -1, -1, 74, 75, 81, 83, 94, 97, 112, 112, 125, 127, 134, 136, 153, 156, 164, 166, 174, 176, 184, 185, 201, 205, 217, 217, 234, 237, -1, -1, 264, 268, 274, 276, 279, 281, 288, 289, 295, 297, 305, 305, 325, 328, 338, 341, 361, 365, 369, 371, 375, 378, 381, 382, 398, 400, 419, 421, 430, 432, 443, 444, 454, 457, 478, 480, 484, 485, 507, 510, 523, 524, 544, 546, 569, 572, 583, 587, 604, 605, 610, 611, 626, 626, 633, 634, 643, 644, 660, 661, -1, -1, 678, 680, 686, 687, -1, -1, 703, 704, 713, 714, 722, 725, 737, 739, 745, 747, 761, 764, 782, 783, 804, 807, 817, 818, 9, 10, 20, 23, 34, 36, 40, 42, -1, -1, -1, -1, -1, -1, 75, 76, 83, 85, 97, 98, 112, 113, 127, 128, -1, -1, 156, 157, -1, -1, 176, 177, 185, 186, 205, 206, 217, 218, 237, 240, -1, -1, 268, 271, 276, 277, -1, -1, 289, 292, 297, 299, 305, 306, 328, 332, 341, 342, 365, 366, -1, -1, 378, 379, -1, -1, 400, 404, 421, 423, 432, 435, -1, -1, 457, 461, 480, 482, 485, 487, 510, 512, 524, 526, 546, 549, 572, 575, 587, 588, 605, 607, 611, 612, 626, 628, -1, -1, -1, -1, 661, 662, -1, -1, 680, 682, -1, -1, -1, -1, 704, 705, 714, 717, 725, 726, 739, 742, -1, -1, 764, 765, 783, 785, 807, 809, 818, 819, };
void __global__ mm(const float * __restrict__ BC, const sparse_matrix AB, const float * __restrict__ bias, float *AC, int *offsets) {
  register float ACC[18] = {0.0}; 
{
    float var0 = 0.0;
    int var1 = (blockIdx.y * 64) + threadIdx.y;
    int var2 = (blockIdx.x * 4) + threadIdx.x;
    if (0 == var2) {
      var0 = BC[0 + var1];
      ACC[1] = ACC[1] + (var0 * -0.185847952961922);
      ACC[2] = ACC[2] + (var0 * 0.0735093206167221);
      ACC[4] = ACC[4] + (var0 * 1.00292372703552);
      var0 = BC[3136 + var1];
      ACC[8] = ACC[8] + (var0 * 0.494816064834595);
      ACC[17] = ACC[17] + (var0 * 0.102857001125813);
      var0 = BC[6272 + var1];
      ACC[10] = ACC[10] + (var0 * -0.21451224386692);
      var0 = BC[9408 + var1];
      var0 = BC[12544 + var1];
      ACC[2] = ACC[2] + (var0 * 0.03581403195858);
      var0 = BC[18816 + var1];
      ACC[13] = ACC[13] + (var0 * -0.424048393964767);
      var0 = BC[21952 + var1];
      ACC[0] = ACC[0] + (var0 * -0.226990684866905);
      ACC[6] = ACC[6] + (var0 * 0.138320371508598);
      var0 = BC[25088 + var1];
      var0 = BC[28224 + var1];
      ACC[9] = ACC[9] + (var0 * 0.232063770294189);
      ACC[11] = ACC[11] + (var0 * 0.355417996644974);
      var0 = BC[31360 + var1];
      ACC[0] = ACC[0] + (var0 * 0.323564380407333);
      ACC[3] = ACC[3] + (var0 * -0.625769376754761);
      var0 = BC[34496 + var1];
      ACC[1] = ACC[1] + (var0 * -0.125326946377754);
      ACC[6] = ACC[6] + (var0 * 0.154665216803551);
      ACC[8] = ACC[8] + (var0 * -0.356636971235275);
      ACC[11] = ACC[11] + (var0 * -0.88983017206192);
      var0 = BC[37632 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0493137203156948);
      var0 = BC[40768 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0335327349603176);
      ACC[3] = ACC[3] + (var0 * -0.252326369285583);
      ACC[16] = ACC[16] + (var0 * -0.339854031801224);
      var0 = BC[43904 + var1];
      ACC[13] = ACC[13] + (var0 * 0.303148686885834);
      var0 = BC[47040 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0436064377427101);
      ACC[4] = ACC[4] + (var0 * 0.664051115512848);
      ACC[17] = ACC[17] + (var0 * -0.122760161757469);
      var0 = BC[50176 + var1];
      var0 = BC[53312 + var1];
      ACC[9] = ACC[9] + (var0 * -0.362415611743927);
      var0 = BC[56448 + var1];
      ACC[14] = ACC[14] + (var0 * 0.215367868542671);
      var0 = BC[59584 + var1];
      ACC[1] = ACC[1] + (var0 * -0.150161430239677);
      ACC[2] = ACC[2] + (var0 * 0.0452220514416695);
      ACC[9] = ACC[9] + (var0 * 0.109259031713009);
      ACC[10] = ACC[10] + (var0 * -0.364441603422165);
      ACC[11] = ACC[11] + (var0 * 0.299770414829254);
      ACC[15] = ACC[15] + (var0 * 0.2818224132061);
      var0 = BC[62720 + var1];
      ACC[13] = ACC[13] + (var0 * -0.422966241836548);
      var0 = BC[65856 + var1];
      ACC[2] = ACC[2] + (var0 * 0.130153834819794);
      ACC[10] = ACC[10] + (var0 * -0.273048520088196);
      ACC[15] = ACC[15] + (var0 * 0.129829213023186);
      ACC[17] = ACC[17] + (var0 * -0.0916974395513535);
      var0 = BC[68992 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0373551473021507);
      var0 = BC[72128 + var1];
      ACC[15] = ACC[15] + (var0 * -0.28222182393074);
      var0 = BC[75264 + var1];
      ACC[17] = ACC[17] + (var0 * 0.135908722877502);
      var0 = BC[78400 + var1];
      ACC[17] = ACC[17] + (var0 * 0.0886573120951653);
      var0 = BC[81536 + var1];
      ACC[1] = ACC[1] + (var0 * 0.0856532752513885);
      ACC[4] = ACC[4] + (var0 * 0.442630171775818);
      var0 = BC[84672 + var1];
      ACC[0] = ACC[0] + (var0 * -0.206785157322884);
      ACC[3] = ACC[3] + (var0 * 0.325305372476578);
      ACC[7] = ACC[7] + (var0 * -0.648884832859039);
      ACC[16] = ACC[16] + (var0 * 0.245057329535484);
      var0 = BC[87808 + var1];
      ACC[9] = ACC[9] + (var0 * 0.152797684073448);
      ACC[11] = ACC[11] + (var0 * 0.169592559337616);
      ACC[16] = ACC[16] + (var0 * -0.428816318511963);
      var0 = BC[90944 + var1];
      ACC[3] = ACC[3] + (var0 * 0.331547766923904);
      ACC[9] = ACC[9] + (var0 * -0.174892365932465);
      var0 = BC[94080 + var1];
      ACC[15] = ACC[15] + (var0 * -0.283894956111908);
      var0 = BC[97216 + var1];
      ACC[15] = ACC[15] + (var0 * -0.101051665842533);
      var0 = BC[100352 + var1];
      var0 = BC[103488 + var1];
      ACC[7] = ACC[7] + (var0 * -0.239272087812424);
      ACC[14] = ACC[14] + (var0 * 0.399930626153946);
      var0 = BC[106624 + var1];
      ACC[4] = ACC[4] + (var0 * 0.230321541428566);
      ACC[9] = ACC[9] + (var0 * 0.23267138004303);
      var0 = BC[109760 + var1];
      ACC[2] = ACC[2] + (var0 * 0.029297012835741);
      var0 = BC[112896 + var1];
      ACC[13] = ACC[13] + (var0 * 0.470927447080612);
      var0 = BC[116032 + var1];
      ACC[8] = ACC[8] + (var0 * 0.252824127674103);
      var0 = BC[119168 + var1];
      var0 = BC[122304 + var1];
      var0 = BC[125440 + var1];
      ACC[1] = ACC[1] + (var0 * -0.1730986982584);
      ACC[2] = ACC[2] + (var0 * 0.0605864115059376);
      ACC[11] = ACC[11] + (var0 * -0.477348953485489);
      var0 = BC[128576 + var1];
      ACC[1] = ACC[1] + (var0 * 0.177751481533051);
      ACC[2] = ACC[2] + (var0 * -0.0521645247936249);
      ACC[17] = ACC[17] + (var0 * -0.145765826106071);
      var0 = BC[131712 + var1];
      ACC[6] = ACC[6] + (var0 * 0.131678834557533);
      ACC[17] = ACC[17] + (var0 * 0.0983353853225708);
      var0 = BC[134848 + var1];
      ACC[1] = ACC[1] + (var0 * 0.161465376615524);
      ACC[2] = ACC[2] + (var0 * -0.0475771985948086);
      ACC[6] = ACC[6] + (var0 * 0.326323688030243);
      ACC[8] = ACC[8] + (var0 * -0.627608120441437);
      ACC[9] = ACC[9] + (var0 * 0.117429338395596);
      ACC[10] = ACC[10] + (var0 * 0.203070446848869);
      ACC[17] = ACC[17] + (var0 * 0.126577585935593);
      var0 = BC[137984 + var1];
      ACC[5] = ACC[5] + (var0 * -0.527791917324066);
      ACC[13] = ACC[13] + (var0 * 0.415121287107468);
      var0 = BC[141120 + var1];
      ACC[1] = ACC[1] + (var0 * -0.228863775730133);
      ACC[2] = ACC[2] + (var0 * 0.123617187142372);
      ACC[4] = ACC[4] + (var0 * -0.727614760398865);
      var0 = BC[144256 + var1];
      ACC[12] = ACC[12] + (var0 * 0.296492487192154);
      var0 = BC[147392 + var1];
      ACC[16] = ACC[16] + (var0 * 0.273180723190308);
      var0 = BC[150528 + var1];
      var0 = BC[153664 + var1];
      ACC[17] = ACC[17] + (var0 * -0.0805901437997818);
      var0 = BC[156800 + var1];
      ACC[6] = ACC[6] + (var0 * 0.171482250094414);
      var0 = BC[159936 + var1];
      ACC[11] = ACC[11] + (var0 * -0.209272712469101);
      ACC[16] = ACC[16] + (var0 * -0.475547164678574);
      var0 = BC[163072 + var1];
      var0 = BC[166208 + var1];
      ACC[13] = ACC[13] + (var0 * -0.309804618358612);
      var0 = BC[172480 + var1];
      ACC[1] = ACC[1] + (var0 * -0.166587755084038);
      ACC[2] = ACC[2] + (var0 * 0.0996415987610817);
      ACC[9] = ACC[9] + (var0 * 0.192917570471764);
      ACC[11] = ACC[11] + (var0 * 0.634382963180542);
      var0 = BC[175616 + var1];
      ACC[17] = ACC[17] + (var0 * 0.192046865820885);
      var0 = BC[178752 + var1];
      ACC[12] = ACC[12] + (var0 * -0.66184276342392);
      var0 = BC[181888 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0438961759209633);
      var0 = BC[185024 + var1];
      ACC[15] = ACC[15] + (var0 * -0.239275574684143);
      var0 = BC[188160 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0631539598107338);
      ACC[9] = ACC[9] + (var0 * 0.338453590869904);
      var0 = BC[191296 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0780935287475586);
      ACC[6] = ACC[6] + (var0 * 0.126294687390327);
      ACC[10] = ACC[10] + (var0 * 0.252809673547745);
      ACC[15] = ACC[15] + (var0 * -0.360209763050079);
      var0 = BC[194432 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0204660072922707);
      ACC[6] = ACC[6] + (var0 * -0.273776143789291);
      ACC[7] = ACC[7] + (var0 * 0.17250719666481);
      var0 = BC[197568 + var1];
      ACC[1] = ACC[1] + (var0 * 0.131517961621284);
      ACC[17] = ACC[17] + (var0 * -0.078723706305027);
      AC[0 + var1] = max_f(ACC[0] + 3.97774410247803, 0.0);
      AC[3136 + var1] = max_f(ACC[1] + 6.53045177459717, 0.0);
      AC[6272 + var1] = max_f(ACC[2] + 0.689180612564087, 0.0);
      AC[9408 + var1] = max_f(ACC[3] + 1.93617045879364, 0.0);
      AC[12544 + var1] = max_f(ACC[4] + -3.67652225494385, 0.0);
      AC[15680 + var1] = max_f(ACC[5] + 5.39940929412842, 0.0);
      AC[18816 + var1] = max_f(ACC[6] + 2.34349393844604, 0.0);
      AC[21952 + var1] = max_f(ACC[7] + 4.98212814331055, 0.0);
      AC[25088 + var1] = max_f(ACC[8] + -0.949707210063934, 0.0);
      AC[28224 + var1] = max_f(ACC[9] + -0.841366529464722, 0.0);
      AC[31360 + var1] = max_f(ACC[10] + 10.7177085876465, 0.0);
      AC[34496 + var1] = max_f(ACC[11] + -0.698113620281219, 0.0);
      AC[37632 + var1] = max_f(ACC[12] + 2.94730615615845, 0.0);
      AC[40768 + var1] = max_f(ACC[13] + -1.62456035614014, 0.0);
      AC[43904 + var1] = max_f(ACC[14] + 0.0610711574554443, 0.0);
      AC[47040 + var1] = max_f(ACC[15] + -2.68517446517944, 0.0);
      AC[50176 + var1] = max_f(ACC[16] + 2.95325136184692, 0.0);
      AC[53312 + var1] = max_f(ACC[17] + 2.90872311592102, 0.0);
    } else {
      if (1 == var2) {
        var0 = BC[0 + var1];
        ACC[9] = ACC[9] + (var0 * 0.163510754704475);
        ACC[10] = ACC[10] + (var0 * 0.051967840641737);
        ACC[11] = ACC[11] + (var0 * -0.117761842906475);
        var0 = BC[3136 + var1];
        ACC[6] = ACC[6] + (var0 * 0.343231320381165);
        ACC[10] = ACC[10] + (var0 * 0.114479139447212);
        ACC[12] = ACC[12] + (var0 * 1.04063391685486);
        var0 = BC[6272 + var1];
        ACC[3] = ACC[3] + (var0 * 0.344431430101395);
        var0 = BC[9408 + var1];
        ACC[3] = ACC[3] + (var0 * -0.543154954910278);
        ACC[4] = ACC[4] + (var0 * -0.322880566120148);
        var0 = BC[12544 + var1];
        ACC[11] = ACC[11] + (var0 * 0.156211987137794);
        ACC[14] = ACC[14] + (var0 * -0.294383555650711);
        var0 = BC[18816 + var1];
        var0 = BC[21952 + var1];
        ACC[1] = ACC[1] + (var0 * -0.271718353033066);
        ACC[11] = ACC[11] + (var0 * -0.168388858437538);
        ACC[13] = ACC[13] + (var0 * 0.187789976596832);
        var0 = BC[25088 + var1];
        ACC[14] = ACC[14] + (var0 * 0.392112761735916);
        var0 = BC[28224 + var1];
        var0 = BC[31360 + var1];
        ACC[0] = ACC[0] + (var0 * -0.36066722869873);
        ACC[1] = ACC[1] + (var0 * 0.190646961331367);
        ACC[11] = ACC[11] + (var0 * -0.181132182478905);
        var0 = BC[34496 + var1];
        ACC[2] = ACC[2] + (var0 * -0.180022820830345);
        ACC[11] = ACC[11] + (var0 * 0.371816456317902);
        var0 = BC[37632 + var1];
        ACC[11] = ACC[11] + (var0 * 0.232245698571205);
        var0 = BC[40768 + var1];
        ACC[0] = ACC[0] + (var0 * -0.301877170801163);
        ACC[1] = ACC[1] + (var0 * 0.24938029050827);
        var0 = BC[43904 + var1];
        ACC[7] = ACC[7] + (var0 * -0.133259475231171);
        var0 = BC[47040 + var1];
        ACC[2] = ACC[2] + (var0 * -0.329096794128418);
        ACC[9] = ACC[9] + (var0 * -0.133281871676445);
        ACC[11] = ACC[11] + (var0 * -0.155151158571243);
        var0 = BC[50176 + var1];
        ACC[13] = ACC[13] + (var0 * -0.120474047958851);
        var0 = BC[53312 + var1];
        var0 = BC[56448 + var1];
        ACC[13] = ACC[13] + (var0 * 0.490748256444931);
        var0 = BC[59584 + var1];
        ACC[3] = ACC[3] + (var0 * 1.20426690578461);
        var0 = BC[62720 + var1];
        var0 = BC[65856 + var1];
        ACC[4] = ACC[4] + (var0 * -0.111750118434429);
        ACC[11] = ACC[11] + (var0 * -0.179925575852394);
        var0 = BC[68992 + var1];
        ACC[11] = ACC[11] + (var0 * 0.249022826552391);
        var0 = BC[72128 + var1];
        var0 = BC[75264 + var1];
        ACC[5] = ACC[5] + (var0 * 0.936380624771118);
        ACC[7] = ACC[7] + (var0 * 0.0970268398523331);
        ACC[10] = ACC[10] + (var0 * 0.0660359859466553);
        var0 = BC[78400 + var1];
        var0 = BC[81536 + var1];
        ACC[2] = ACC[2] + (var0 * -0.216289654374123);
        ACC[14] = ACC[14] + (var0 * -0.385448724031448);
        var0 = BC[84672 + var1];
        ACC[0] = ACC[0] + (var0 * 0.525663614273071);
        ACC[1] = ACC[1] + (var0 * -0.327216595411301);
        ACC[4] = ACC[4] + (var0 * -0.134090229868889);
        ACC[8] = ACC[8] + (var0 * -0.173739865422249);
        ACC[13] = ACC[13] + (var0 * 0.205095201730728);
        var0 = BC[87808 + var1];
        var0 = BC[90944 + var1];
        var0 = BC[94080 + var1];
        ACC[4] = ACC[4] + (var0 * -0.238267377018929);
        var0 = BC[97216 + var1];
        ACC[3] = ACC[3] + (var0 * -0.204131707549095);
        var0 = BC[100352 + var1];
        var0 = BC[103488 + var1];
        ACC[10] = ACC[10] + (var0 * 0.0660830363631248);
        ACC[13] = ACC[13] + (var0 * 0.416904151439667);
        var0 = BC[106624 + var1];
        ACC[0] = ACC[0] + (var0 * 0.17405392229557);
        ACC[1] = ACC[1] + (var0 * -0.304099172353745);
        ACC[8] = ACC[8] + (var0 * -0.349805593490601);
        var0 = BC[109760 + var1];
        ACC[8] = ACC[8] + (var0 * 0.141188517212868);
        ACC[10] = ACC[10] + (var0 * -0.0951091274619102);
        var0 = BC[112896 + var1];
        ACC[7] = ACC[7] + (var0 * 0.143862709403038);
        var0 = BC[116032 + var1];
        ACC[0] = ACC[0] + (var0 * -0.106563374400139);
        ACC[10] = ACC[10] + (var0 * -0.16593162715435);
        var0 = BC[119168 + var1];
        ACC[1] = ACC[1] + (var0 * -0.143296495079994);
        ACC[13] = ACC[13] + (var0 * 0.296046644449234);
        var0 = BC[122304 + var1];
        ACC[4] = ACC[4] + (var0 * -0.320277363061905);
        var0 = BC[125440 + var1];
        ACC[2] = ACC[2] + (var0 * -0.325396507978439);
        ACC[9] = ACC[9] + (var0 * 0.235322341322899);
        ACC[11] = ACC[11] + (var0 * 0.289817929267883);
        ACC[14] = ACC[14] + (var0 * 0.277400940656662);
        var0 = BC[128576 + var1];
        ACC[11] = ACC[11] + (var0 * -0.303118169307709);
        var0 = BC[131712 + var1];
        ACC[13] = ACC[13] + (var0 * -0.377754122018814);
        var0 = BC[134848 + var1];
        ACC[10] = ACC[10] + (var0 * 0.100999929010868);
        ACC[11] = ACC[11] + (var0 * -0.248531937599182);
        var0 = BC[137984 + var1];
        ACC[5] = ACC[5] + (var0 * 0.30983778834343);
        var0 = BC[141120 + var1];
        ACC[2] = ACC[2] + (var0 * 0.0784118473529816);
        ACC[9] = ACC[9] + (var0 * 0.172755494713783);
        ACC[11] = ACC[11] + (var0 * 0.220757409930229);
        ACC[14] = ACC[14] + (var0 * 0.24208427965641);
        var0 = BC[144256 + var1];
        ACC[11] = ACC[11] + (var0 * 0.262644618749619);
        ACC[14] = ACC[14] + (var0 * 0.144243359565735);
        var0 = BC[147392 + var1];
        ACC[0] = ACC[0] + (var0 * -0.172494441270828);
        ACC[1] = ACC[1] + (var0 * 0.179975792765617);
        var0 = BC[150528 + var1];
        ACC[6] = ACC[6] + (var0 * 0.833234071731567);
        ACC[7] = ACC[7] + (var0 * -0.124322928488255);
        ACC[12] = ACC[12] + (var0 * -1.35094046592712);
        var0 = BC[153664 + var1];
        ACC[10] = ACC[10] + (var0 * -0.0677271261811256);
        var0 = BC[156800 + var1];
        ACC[1] = ACC[1] + (var0 * 0.155769422650337);
        var0 = BC[159936 + var1];
        var0 = BC[163072 + var1];
        ACC[7] = ACC[7] + (var0 * -0.0401646792888641);
        ACC[8] = ACC[8] + (var0 * 0.230681255459785);
        var0 = BC[166208 + var1];
        ACC[5] = ACC[5] + (var0 * -0.426818609237671);
        var0 = BC[172480 + var1];
        ACC[2] = ACC[2] + (var0 * -0.145936504006386);
        ACC[9] = ACC[9] + (var0 * 0.11957474052906);
        ACC[11] = ACC[11] + (var0 * -0.246689781546593);
        var0 = BC[175616 + var1];
        var0 = BC[178752 + var1];
        ACC[14] = ACC[14] + (var0 * -0.339327663183212);
        var0 = BC[181888 + var1];
        ACC[4] = ACC[4] + (var0 * -0.203265115618706);
        ACC[8] = ACC[8] + (var0 * -0.21282434463501);
        ACC[10] = ACC[10] + (var0 * -0.0840817168354988);
        var0 = BC[185024 + var1];
        ACC[4] = ACC[4] + (var0 * -0.11259913444519);
        var0 = BC[188160 + var1];
        ACC[4] = ACC[4] + (var0 * 0.151221990585327);
        ACC[11] = ACC[11] + (var0 * -0.270052164793015);
        ACC[13] = ACC[13] + (var0 * -0.112145163118839);
        var0 = BC[191296 + var1];
        ACC[3] = ACC[3] + (var0 * 0.68241560459137);
        ACC[11] = ACC[11] + (var0 * -0.184792086482048);
        var0 = BC[194432 + var1];
        ACC[3] = ACC[3] + (var0 * 0.798361122608185);
        ACC[10] = ACC[10] + (var0 * -0.0888344347476959);
        ACC[11] = ACC[11] + (var0 * 0.358373403549194);
        var0 = BC[197568 + var1];
        ACC[10] = ACC[10] + (var0 * -0.0854452922940254);
        AC[56448 + var1] = max_f(ACC[0] + 0.585728049278259, 0.0);
        AC[59584 + var1] = max_f(ACC[1] + 2.46107268333435, 0.0);
        AC[62720 + var1] = max_f(ACC[2] + 5.15319061279297, 0.0);
        AC[65856 + var1] = max_f(ACC[3] + -21.5983295440674, 0.0);
        AC[68992 + var1] = max_f(ACC[4] + 6.76912784576416, 0.0);
        AC[72128 + var1] = max_f(ACC[5] + -1.43688929080963, 0.0);
        AC[75264 + var1] = max_f(ACC[6] + -2.44151854515076, 0.0);
        AC[78400 + var1] = max_f(ACC[7] + 2.38876342773438, 0.0);
        AC[81536 + var1] = max_f(ACC[8] + 4.23959064483643, 0.0);
        AC[84672 + var1] = max_f(ACC[9] + 1.74140977859497, 0.0);
        AC[87808 + var1] = max_f(ACC[10] + 4.02036380767822, 0.0);
        AC[90944 + var1] = max_f(ACC[11] + 3.30771112442017, 0.0);
        AC[94080 + var1] = max_f(ACC[12] + 1.83186113834381, 0.0);
        AC[97216 + var1] = max_f(ACC[13] + -3.47192811965942, 0.0);
        AC[100352 + var1] = max_f(ACC[14] + 1.40292310714722, 0.0);
      } else {
        if (2 == var2) {
          for (int var3 = 0; var3 < 64; var3 = var3 + 1) {
            var0 = BC[(var3 * 3136) + var1];
            int var4 = offsets[2 * (128 + var3)];
            int var5 = offsets[(2 * (128 + var3)) + 1];
            for (int var6 = var4; var6 < var5; var6 = var6 + 1) {
              int var7 = AB.row_val[var6];
              ACC[var7 - 33] = ACC[var7 - 33] + (var0 * AB.values[var6]);
            }
          }
          for (int var8 = 33; var8 < 49; var8 = var8 + 1) {
            AC[(var8 * 3136) + var1] = max_f(ACC[var8 - 33] + bias[var8], 0.0);
          }
        } else {
          if (3 == var2) {
            for (int var9 = 0; var9 < 64; var9 = var9 + 1) {
              var0 = BC[(var9 * 3136) + var1];
              int var10 = offsets[2 * (192 + var9)];
              int var11 = offsets[(2 * (192 + var9)) + 1];
              for (int var12 = var10; var12 < var11; var12 = var12 + 1) {
                int var13 = AB.row_val[var12];
                ACC[var13 - 49] = ACC[var13 - 49] + (var0 * AB.values[var12]);
              }
            }
            for (int var14 = 49; var14 < 66; var14 = var14 + 1) {
              AC[(var14 * 3136) + var1] = max_f(ACC[var14 - 49] + bias[var14], 0.0);
            }
          } else {
            if (4 == var2) {
              var0 = BC[0 + var1];
              var0 = BC[3136 + var1];
              var0 = BC[6272 + var1];
              ACC[3] = ACC[3] + (var0 * 0.208156809210777);
              var0 = BC[9408 + var1];
              ACC[6] = ACC[6] + (var0 * 1.06676936149597);
              ACC[14] = ACC[14] + (var0 * -0.121625423431396);
              var0 = BC[12544 + var1];
              ACC[1] = ACC[1] + (var0 * -0.623119711875916);
              var0 = BC[18816 + var1];
              ACC[13] = ACC[13] + (var0 * -0.0863250866532326);
              var0 = BC[21952 + var1];
              ACC[2] = ACC[2] + (var0 * -0.304842680692673);
              ACC[4] = ACC[4] + (var0 * 0.368258267641068);
              ACC[8] = ACC[8] + (var0 * 0.162452295422554);
              var0 = BC[25088 + var1];
              ACC[10] = ACC[10] + (var0 * 0.405676662921906);
              ACC[15] = ACC[15] + (var0 * 0.232512876391411);
              var0 = BC[28224 + var1];
              ACC[3] = ACC[3] + (var0 * -0.5205939412117);
              ACC[9] = ACC[9] + (var0 * 0.180561810731888);
              ACC[15] = ACC[15] + (var0 * -0.363618731498718);
              var0 = BC[31360 + var1];
              ACC[10] = ACC[10] + (var0 * 0.367863297462463);
              var0 = BC[34496 + var1];
              ACC[3] = ACC[3] + (var0 * 0.3397336602211);
              var0 = BC[37632 + var1];
              ACC[1] = ACC[1] + (var0 * -0.690811574459076);
              var0 = BC[40768 + var1];
              ACC[0] = ACC[0] + (var0 * -0.270518958568573);
              ACC[2] = ACC[2] + (var0 * 0.264188021421432);
              ACC[4] = ACC[4] + (var0 * -0.224176362156868);
              ACC[11] = ACC[11] + (var0 * 0.110767520964146);
              ACC[14] = ACC[14] + (var0 * -0.235269904136658);
              var0 = BC[43904 + var1];
              var0 = BC[47040 + var1];
              var0 = BC[50176 + var1];
              ACC[12] = ACC[12] + (var0 * -0.333335906267166);
              var0 = BC[53312 + var1];
              ACC[0] = ACC[0] + (var0 * 0.408362150192261);
              ACC[9] = ACC[9] + (var0 * -0.123270072042942);
              ACC[15] = ACC[15] + (var0 * 0.71665632724762);
              var0 = BC[56448 + var1];
              ACC[5] = ACC[5] + (var0 * 0.648839890956879);
              ACC[9] = ACC[9] + (var0 * 0.130156800150871);
              var0 = BC[59584 + var1];
              ACC[3] = ACC[3] + (var0 * -0.224358931183815);
              ACC[4] = ACC[4] + (var0 * 0.41122704744339);
              ACC[9] = ACC[9] + (var0 * 0.305293291807175);
              ACC[14] = ACC[14] + (var0 * -0.15971514582634);
              var0 = BC[62720 + var1];
              var0 = BC[65856 + var1];
              ACC[3] = ACC[3] + (var0 * 0.477877467870712);
              ACC[11] = ACC[11] + (var0 * -0.145789280533791);
              ACC[14] = ACC[14] + (var0 * -0.174598097801208);
              var0 = BC[68992 + var1];
              ACC[1] = ACC[1] + (var0 * -0.449295252561569);
              var0 = BC[72128 + var1];
              var0 = BC[75264 + var1];
              ACC[13] = ACC[13] + (var0 * -0.192336544394493);
              var0 = BC[78400 + var1];
              ACC[7] = ACC[7] + (var0 * 0.369652032852173);
              var0 = BC[81536 + var1];
              var0 = BC[84672 + var1];
              ACC[0] = ACC[0] + (var0 * 0.505187809467316);
              ACC[2] = ACC[2] + (var0 * -0.372062772512436);
              ACC[11] = ACC[11] + (var0 * 0.116433396935463);
              ACC[14] = ACC[14] + (var0 * -0.246676534414291);
              ACC[15] = ACC[15] + (var0 * 0.255019217729568);
              var0 = BC[87808 + var1];
              ACC[11] = ACC[11] + (var0 * -0.0781474187970161);
              var0 = BC[90944 + var1];
              ACC[8] = ACC[8] + (var0 * -0.385317027568817);
              ACC[9] = ACC[9] + (var0 * -0.181286737322807);
              ACC[10] = ACC[10] + (var0 * -0.47218981385231);
              var0 = BC[94080 + var1];
              var0 = BC[97216 + var1];
              ACC[4] = ACC[4] + (var0 * 0.202942460775375);
              var0 = BC[100352 + var1];
              ACC[7] = ACC[7] + (var0 * 0.753870129585266);
              var0 = BC[103488 + var1];
              ACC[5] = ACC[5] + (var0 * 0.530808985233307);
              ACC[9] = ACC[9] + (var0 * -0.164501368999481);
              ACC[12] = ACC[12] + (var0 * -0.158008456230164);
              var0 = BC[106624 + var1];
              var0 = BC[109760 + var1];
              ACC[4] = ACC[4] + (var0 * -0.449995696544647);
              ACC[6] = ACC[6] + (var0 * 1.13931024074554);
              var0 = BC[112896 + var1];
              ACC[13] = ACC[13] + (var0 * -0.120921552181244);
              var0 = BC[116032 + var1];
              ACC[8] = ACC[8] + (var0 * 0.481433540582657);
              ACC[9] = ACC[9] + (var0 * 0.192737907171249);
              ACC[11] = ACC[11] + (var0 * 0.116342388093472);
              var0 = BC[119168 + var1];
              ACC[7] = ACC[7] + (var0 * -0.300676286220551);
              ACC[8] = ACC[8] + (var0 * 0.346368551254272);
              ACC[9] = ACC[9] + (var0 * 0.206087619066238);
              ACC[12] = ACC[12] + (var0 * 0.242603421211243);
              ACC[15] = ACC[15] + (var0 * -0.292531698942184);
              var0 = BC[122304 + var1];
              ACC[13] = ACC[13] + (var0 * -0.0876072272658348);
              var0 = BC[125440 + var1];
              ACC[3] = ACC[3] + (var0 * 0.314788043498993);
              ACC[10] = ACC[10] + (var0 * -0.355945199728012);
              var0 = BC[128576 + var1];
              var0 = BC[131712 + var1];
              ACC[7] = ACC[7] + (var0 * -0.451115965843201);
              ACC[8] = ACC[8] + (var0 * 0.323309719562531);
              ACC[9] = ACC[9] + (var0 * 0.259174823760986);
              ACC[12] = ACC[12] + (var0 * -0.241572499275208);
              var0 = BC[134848 + var1];
              ACC[4] = ACC[4] + (var0 * -0.26206162571907);
              ACC[11] = ACC[11] + (var0 * -0.136436060070992);
              ACC[12] = ACC[12] + (var0 * -0.169921025633812);
              ACC[14] = ACC[14] + (var0 * 0.23800203204155);
              var0 = BC[137984 + var1];
              var0 = BC[141120 + var1];
              ACC[8] = ACC[8] + (var0 * 0.278852522373199);
              ACC[9] = ACC[9] + (var0 * 0.254267156124115);
              var0 = BC[144256 + var1];
              var0 = BC[147392 + var1];
              ACC[0] = ACC[0] + (var0 * -0.234941750764847);
              ACC[2] = ACC[2] + (var0 * 0.250106990337372);
              ACC[11] = ACC[11] + (var0 * 0.0934428870677948);
              ACC[13] = ACC[13] + (var0 * -0.198241025209427);
              var0 = BC[150528 + var1];
              var0 = BC[153664 + var1];
              ACC[3] = ACC[3] + (var0 * -0.296284765005112);
              var0 = BC[156800 + var1];
              ACC[7] = ACC[7] + (var0 * -0.413653075695038);
              ACC[9] = ACC[9] + (var0 * 0.16044457256794);
              ACC[15] = ACC[15] + (var0 * 0.285038441419601);
              var0 = BC[159936 + var1];
              ACC[4] = ACC[4] + (var0 * 0.425947964191437);
              var0 = BC[163072 + var1];
              ACC[0] = ACC[0] + (var0 * -0.429837584495544);
              ACC[10] = ACC[10] + (var0 * -0.210085734724998);
              var0 = BC[166208 + var1];
              var0 = BC[172480 + var1];
              ACC[1] = ACC[1] + (var0 * -0.53100997209549);
              ACC[3] = ACC[3] + (var0 * -0.441229075193405);
              ACC[9] = ACC[9] + (var0 * 0.214505732059479);
              var0 = BC[175616 + var1];
              ACC[7] = ACC[7] + (var0 * -0.223868027329445);
              ACC[12] = ACC[12] + (var0 * 0.245186969637871);
              var0 = BC[178752 + var1];
              var0 = BC[181888 + var1];
              ACC[6] = ACC[6] + (var0 * 0.730958819389343);
              var0 = BC[185024 + var1];
              var0 = BC[188160 + var1];
              ACC[8] = ACC[8] + (var0 * 0.488325476646423);
              ACC[11] = ACC[11] + (var0 * 0.102604404091835);
              ACC[12] = ACC[12] + (var0 * -0.249868303537369);
              ACC[14] = ACC[14] + (var0 * -0.260959833860397);
              var0 = BC[191296 + var1];
              ACC[3] = ACC[3] + (var0 * 0.188429787755013);
              ACC[9] = ACC[9] + (var0 * -0.196686387062073);
              ACC[11] = ACC[11] + (var0 * 0.223037257790565);
              var0 = BC[194432 + var1];
              ACC[3] = ACC[3] + (var0 * -0.513691544532776);
              ACC[9] = ACC[9] + (var0 * 0.295544773340225);
              ACC[14] = ACC[14] + (var0 * -0.149710655212402);
              ACC[15] = ACC[15] + (var0 * -0.262246400117874);
              var0 = BC[197568 + var1];
              ACC[3] = ACC[3] + (var0 * 0.17898778617382);
              AC[206976 + var1] = max_f(ACC[0] + -2.7919135093689, 0.0);
              AC[210112 + var1] = max_f(ACC[1] + 1.73715841770172, 0.0);
              AC[213248 + var1] = max_f(ACC[2] + 3.18482828140259, 0.0);
              AC[216384 + var1] = max_f(ACC[3] + -0.249441385269165, 0.0);
              AC[219520 + var1] = max_f(ACC[4] + 0.0144340991973877, 0.0);
              AC[222656 + var1] = max_f(ACC[5] + -2.94003796577454, 0.0);
              AC[225792 + var1] = max_f(ACC[6] + -9.41513252258301, 0.0);
              AC[228928 + var1] = max_f(ACC[7] + -3.1973352432251, 0.0);
              AC[232064 + var1] = max_f(ACC[8] + -5.67008066177368, 0.0);
              AC[235200 + var1] = max_f(ACC[9] + -6.30630779266357, 0.0);
              AC[238336 + var1] = max_f(ACC[10] + 1.83989608287811, 0.0);
              AC[241472 + var1] = max_f(ACC[11] + 1.70226573944092, 0.0);
              AC[244608 + var1] = max_f(ACC[12] + 5.37326335906982, 0.0);
              AC[247744 + var1] = max_f(ACC[13] + 4.75103092193604, 0.0);
              AC[250880 + var1] = max_f(ACC[14] + 11.0786228179932, 0.0);
              AC[254016 + var1] = max_f(ACC[15] + -2.08528780937195, 0.0);
            } else {
              if (5 == var2) {
                var0 = BC[0 + var1];
                var0 = BC[3136 + var1];
                ACC[4] = ACC[4] + (var0 * 0.0910881757736206);
                var0 = BC[6272 + var1];
                ACC[0] = ACC[0] + (var0 * -0.166493430733681);
                ACC[1] = ACC[1] + (var0 * -0.577564716339111);
                ACC[6] = ACC[6] + (var0 * 0.185040682554245);
                ACC[9] = ACC[9] + (var0 * -0.577942669391632);
                var0 = BC[9408 + var1];
                var0 = BC[12544 + var1];
                var0 = BC[21952 + var1];
                ACC[0] = ACC[0] + (var0 * -0.320909351110458);
                ACC[3] = ACC[3] + (var0 * -0.0613245740532875);
                ACC[5] = ACC[5] + (var0 * -0.156286284327507);
                ACC[6] = ACC[6] + (var0 * 0.214202627539635);
                var0 = BC[25088 + var1];
                ACC[12] = ACC[12] + (var0 * -0.322737812995911);
                var0 = BC[28224 + var1];
                ACC[0] = ACC[0] + (var0 * 0.264695942401886);
                ACC[1] = ACC[1] + (var0 * 0.560324370861053);
                ACC[6] = ACC[6] + (var0 * -0.487740248441696);
                var0 = BC[31360 + var1];
                ACC[0] = ACC[0] + (var0 * -0.206529915332794);
                ACC[3] = ACC[3] + (var0 * 0.0286062508821487);
                ACC[5] = ACC[5] + (var0 * 0.201617762446404);
                var0 = BC[34496 + var1];
                ACC[0] = ACC[0] + (var0 * -0.285410434007645);
                ACC[1] = ACC[1] + (var0 * -0.521107494831085);
                ACC[6] = ACC[6] + (var0 * 0.284963339567184);
                var0 = BC[37632 + var1];
                var0 = BC[40768 + var1];
                ACC[4] = ACC[4] + (var0 * -0.0614288188517094);
                ACC[7] = ACC[7] + (var0 * -0.235178112983704);
                ACC[10] = ACC[10] + (var0 * 0.337569981813431);
                var0 = BC[43904 + var1];
                ACC[12] = ACC[12] + (var0 * 0.423784285783768);
                var0 = BC[47040 + var1];
                var0 = BC[50176 + var1];
                ACC[3] = ACC[3] + (var0 * -0.185761228203773);
                ACC[11] = ACC[11] + (var0 * 0.276566028594971);
                ACC[13] = ACC[13] + (var0 * -0.0904954671859741);
                var0 = BC[53312 + var1];
                ACC[3] = ACC[3] + (var0 * 0.14835686981678);
                ACC[5] = ACC[5] + (var0 * 0.240195870399475);
                ACC[6] = ACC[6] + (var0 * 0.239853531122208);
                var0 = BC[56448 + var1];
                ACC[10] = ACC[10] + (var0 * 0.308829337358475);
                ACC[11] = ACC[11] + (var0 * -0.277474462985992);
                ACC[13] = ACC[13] + (var0 * -0.226775333285332);
                var0 = BC[59584 + var1];
                ACC[1] = ACC[1] + (var0 * 0.510121583938599);
                ACC[4] = ACC[4] + (var0 * -0.067366935312748);
                ACC[6] = ACC[6] + (var0 * -0.251201242208481);
                var0 = BC[62720 + var1];
                ACC[8] = ACC[8] + (var0 * 1.03739750385284);
                var0 = BC[65856 + var1];
                ACC[0] = ACC[0] + (var0 * -0.319832116365433);
                ACC[1] = ACC[1] + (var0 * -0.940069854259491);
                ACC[4] = ACC[4] + (var0 * -0.0713007524609566);
                ACC[6] = ACC[6] + (var0 * 0.383137136697769);
                ACC[9] = ACC[9] + (var0 * -0.679332137107849);
                var0 = BC[68992 + var1];
                var0 = BC[72128 + var1];
                var0 = BC[75264 + var1];
                ACC[4] = ACC[4] + (var0 * 0.0790794268250465);
                var0 = BC[78400 + var1];
                var0 = BC[81536 + var1];
                var0 = BC[84672 + var1];
                ACC[7] = ACC[7] + (var0 * 0.378760784864426);
                var0 = BC[87808 + var1];
                ACC[6] = ACC[6] + (var0 * -0.159042820334435);
                var0 = BC[90944 + var1];
                ACC[0] = ACC[0] + (var0 * 0.279687792062759);
                ACC[3] = ACC[3] + (var0 * -0.0537228733301163);
                ACC[5] = ACC[5] + (var0 * -0.248141840100288);
                var0 = BC[94080 + var1];
                var0 = BC[97216 + var1];
                var0 = BC[100352 + var1];
                var0 = BC[103488 + var1];
                ACC[4] = ACC[4] + (var0 * 0.0634389966726303);
                ACC[10] = ACC[10] + (var0 * 0.356949537992477);
                ACC[11] = ACC[11] + (var0 * -0.388464957475662);
                ACC[13] = ACC[13] + (var0 * -0.206857427954674);
                var0 = BC[106624 + var1];
                ACC[0] = ACC[0] + (var0 * 0.149510681629181);
                ACC[5] = ACC[5] + (var0 * 0.179718062281609);
                ACC[6] = ACC[6] + (var0 * -0.288659363985062);
                ACC[7] = ACC[7] + (var0 * 0.377749383449554);
                var0 = BC[109760 + var1];
                var0 = BC[112896 + var1];
                ACC[8] = ACC[8] + (var0 * -0.36768901348114);
                var0 = BC[116032 + var1];
                ACC[4] = ACC[4] + (var0 * -0.131365671753883);
                var0 = BC[119168 + var1];
                ACC[5] = ACC[5] + (var0 * -0.203168481588364);
                var0 = BC[122304 + var1];
                var0 = BC[125440 + var1];
                ACC[0] = ACC[0] + (var0 * -0.248320698738098);
                ACC[1] = ACC[1] + (var0 * -0.434726595878601);
                ACC[6] = ACC[6] + (var0 * 0.321474879980087);
                var0 = BC[128576 + var1];
                ACC[0] = ACC[0] + (var0 * 0.166048720479012);
                ACC[4] = ACC[4] + (var0 * -0.0613601803779602);
                var0 = BC[131712 + var1];
                ACC[11] = ACC[11] + (var0 * 0.288115233182907);
                var0 = BC[134848 + var1];
                ACC[3] = ACC[3] + (var0 * -0.0979631766676903);
                ACC[4] = ACC[4] + (var0 * 0.0550836138427258);
                var0 = BC[137984 + var1];
                ACC[8] = ACC[8] + (var0 * -0.382793068885803);
                var0 = BC[141120 + var1];
                var0 = BC[144256 + var1];
                var0 = BC[147392 + var1];
                ACC[10] = ACC[10] + (var0 * 0.216196969151497);
                ACC[12] = ACC[12] + (var0 * -0.570418477058411);
                ACC[13] = ACC[13] + (var0 * -0.104502946138382);
                var0 = BC[150528 + var1];
                ACC[12] = ACC[12] + (var0 * 0.45899161696434);
                var0 = BC[153664 + var1];
                ACC[0] = ACC[0] + (var0 * 0.248013660311699);
                ACC[4] = ACC[4] + (var0 * -0.0688654705882072);
                ACC[6] = ACC[6] + (var0 * -0.154723331332207);
                var0 = BC[156800 + var1];
                ACC[3] = ACC[3] + (var0 * 0.149419605731964);
                ACC[5] = ACC[5] + (var0 * 0.324552774429321);
                ACC[13] = ACC[13] + (var0 * 0.113498814404011);
                var0 = BC[159936 + var1];
                ACC[0] = ACC[0] + (var0 * -0.135972052812576);
                var0 = BC[163072 + var1];
                ACC[3] = ACC[3] + (var0 * -0.0548508651554585);
                ACC[6] = ACC[6] + (var0 * -0.186042547225952);
                ACC[7] = ACC[7] + (var0 * -0.301038265228271);
                var0 = BC[166208 + var1];
                var0 = BC[172480 + var1];
                ACC[6] = ACC[6] + (var0 * -0.240973442792892);
                ACC[9] = ACC[9] + (var0 * -0.178309544920921);
                var0 = BC[175616 + var1];
                ACC[3] = ACC[3] + (var0 * 0.0698355436325073);
                var0 = BC[178752 + var1];
                var0 = BC[181888 + var1];
                ACC[4] = ACC[4] + (var0 * -0.0999222323298454);
                ACC[6] = ACC[6] + (var0 * 0.133857443928719);
                ACC[10] = ACC[10] + (var0 * -0.365336835384369);
                var0 = BC[185024 + var1];
                var0 = BC[188160 + var1];
                ACC[6] = ACC[6] + (var0 * 0.177838280797005);
                var0 = BC[191296 + var1];
                ACC[1] = ACC[1] + (var0 * -0.480060815811157);
                ACC[6] = ACC[6] + (var0 * 0.145014822483063);
                ACC[9] = ACC[9] + (var0 * -0.392141938209534);
                var0 = BC[194432 + var1];
                ACC[0] = ACC[0] + (var0 * 0.318552941083908);
                ACC[1] = ACC[1] + (var0 * 1.24305057525635);
                ACC[4] = ACC[4] + (var0 * -0.0638187900185585);
                ACC[6] = ACC[6] + (var0 * -0.435984313488007);
                ACC[9] = ACC[9] + (var0 * 0.567946255207062);
                var0 = BC[197568 + var1];
                ACC[0] = ACC[0] + (var0 * -0.197493180632591);
                ACC[4] = ACC[4] + (var0 * -0.0513238161802292);
                ACC[6] = ACC[6] + (var0 * 0.220119342207909);
                AC[257152 + var1] = max_f(ACC[0] + 8.10121631622314, 0.0);
                AC[260288 + var1] = max_f(ACC[1] + 6.3770580291748, 0.0);
                AC[263424 + var1] = max_f(ACC[2] + 2.30626821517944, 0.0);
                AC[266560 + var1] = max_f(ACC[3] + 2.43514847755432, 0.0);
                AC[269696 + var1] = max_f(ACC[4] + 5.16119861602783, 0.0);
                AC[272832 + var1] = max_f(ACC[5] + 3.16917514801025, 0.0);
                AC[275968 + var1] = max_f(ACC[6] + 0.501362562179565, 0.0);
                AC[279104 + var1] = max_f(ACC[7] + -0.371479392051697, 0.0);
                AC[282240 + var1] = max_f(ACC[8] + 3.21858835220337, 0.0);
                AC[285376 + var1] = max_f(ACC[9] + 15.2057437896729, 0.0);
                AC[288512 + var1] = max_f(ACC[10] + -2.09268856048584, 0.0);
                AC[291648 + var1] = max_f(ACC[11] + 3.27589416503906, 0.0);
                AC[294784 + var1] = max_f(ACC[12] + -1.75040054321289, 0.0);
                AC[297920 + var1] = max_f(ACC[13] + 5.13914966583252, 0.0);
              } else {
                if (6 == var2) {
                  for (int var15 = 0; var15 < 64; var15 = var15 + 1) {
                    var0 = BC[(var15 * 3136) + var1];
                    int var16 = offsets[2 * (384 + var15)];
                    int var17 = offsets[(2 * (384 + var15)) + 1];
                    for (int var18 = var16; var18 < var17; var18 = var18 + 1) {
                      int var19 = AB.row_val[var18];
                      ACC[var19 - 96] = ACC[var19 - 96] + (var0 * AB.values[var18]);
                    }
                  }
                  for (int var20 = 96; var20 < 113; var20 = var20 + 1) {
                    AC[(var20 * 3136) + var1] = max_f(ACC[var20 - 96] + bias[var20], 0.0);
                  }
                } else {
                  for (int var21 = 0; var21 < 64; var21 = var21 + 1) {
                    var0 = BC[(var21 * 3136) + var1];
                    int var22 = offsets[2 * (448 + var21)];
                    int var23 = offsets[(2 * (448 + var21)) + 1];
                    for (int var24 = var22; var24 < var23; var24 = var24 + 1) {
                      int var25 = AB.row_val[var24];
                      ACC[var25 - 113] = ACC[var25 - 113] + (var0 * AB.values[var24]);
                    }
                  }
                  for (int var26 = 113; var26 < 128; var26 = var26 + 1) {
                    AC[(var26 * 3136) + var1] = max_f(ACC[var26 - 113] + bias[var26], 0.0);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
