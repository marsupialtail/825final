#define A_dim (128)
#define B_dim (64)
#define C_dim (3136)
#define Gy_i (1)
#define Gy_d (0)
#define A_blocks (1)
#define C_blocks (49)
#define offsets_size (128)
float __device__ max_f(float a, float b) {return a>b?a:b;}
static int offsets[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
void __global__ mm(const float * __restrict__ BC, const sparse_matrix AB, const float * __restrict__ bias, float *AC, int *offsets) {
  register float ACC[128] = {0.0}; 
  float __shared__ smem[8192];
  for(int _it = threadIdx.y * 2 + threadIdx.x; _it < 8192; _it += blockDim.x * blockDim.y) smem[_it] = 0.0; __syncthreads();
{
    float var0 = 0.0f;
    int var1 = (blockIdx.y * 64) + threadIdx.y;
    int var2 = (blockIdx.x * 2) + threadIdx.x;
    if (0 == var2) {
      var0 = BC[0 + var1];
      ACC[1] = ACC[1] + (var0 * -0.185847952961922f);
      ACC[2] = ACC[2] + (var0 * 0.0735093206167221f);
      ACC[4] = ACC[4] + (var0 * 1.00292372703552f);
      ACC[27] = ACC[27] + (var0 * 0.163510754704475f);
      ACC[28] = ACC[28] + (var0 * 0.051967840641737f);
      ACC[29] = ACC[29] + (var0 * -0.117761842906475f);
      ACC[45] = ACC[45] + (var0 * 0.920228779315948f);
      ACC[46] = ACC[46] + (var0 * -0.103516310453415f);
      ACC[52] = ACC[52] + (var0 * -0.192782312631607f);
      ACC[126] = ACC[126] + (var0 * -0.440630286931992f);
      var0 = BC[3136 + var1];
      ACC[8] = ACC[8] + (var0 * 0.494816064834595f);
      ACC[17] = ACC[17] + (var0 * 0.102857001125813f);
      ACC[24] = ACC[24] + (var0 * 0.343231320381165f);
      ACC[28] = ACC[28] + (var0 * 0.114479139447212f);
      ACC[30] = ACC[30] + (var0 * 1.04063391685486f);
      ACC[38] = ACC[38] + (var0 * 0.126676738262177f);
      ACC[62] = ACC[62] + (var0 * -0.105981513857841f);
      ACC[86] = ACC[86] + (var0 * 0.0910881757736206f);
      ACC[100] = ACC[100] + (var0 * 0.558487832546234f);
      ACC[110] = ACC[110] + (var0 * 0.20598466694355f);
      ACC[114] = ACC[114] + (var0 * 0.220280915498734f);
      ACC[117] = ACC[117] + (var0 * 0.122832506895065f);
      ACC[118] = ACC[118] + (var0 * 0.136661052703857f);
      var0 = BC[6272 + var1];
      ACC[10] = ACC[10] + (var0 * -0.21451224386692f);
      ACC[21] = ACC[21] + (var0 * 0.344431430101395f);
      ACC[46] = ACC[46] + (var0 * -0.116003379225731f);
      ACC[69] = ACC[69] + (var0 * 0.208156809210777f);
      ACC[82] = ACC[82] + (var0 * -0.166493430733681f);
      ACC[83] = ACC[83] + (var0 * -0.577564716339111f);
      ACC[88] = ACC[88] + (var0 * 0.185040682554245f);
      ACC[91] = ACC[91] + (var0 * -0.577942669391632f);
      ACC[102] = ACC[102] + (var0 * -0.182655781507492f);
      ACC[106] = ACC[106] + (var0 * -0.235990807414055f);
      ACC[108] = ACC[108] + (var0 * 0.263884216547012f);
      ACC[117] = ACC[117] + (var0 * -0.0871804431080818f);
      ACC[127] = ACC[127] + (var0 * 0.205743536353111f);
      var0 = BC[9408 + var1];
      ACC[21] = ACC[21] + (var0 * -0.543154954910278f);
      ACC[22] = ACC[22] + (var0 * -0.322880566120148f);
      ACC[72] = ACC[72] + (var0 * 1.06676936149597f);
      ACC[80] = ACC[80] + (var0 * -0.121625423431396f);
      ACC[125] = ACC[125] + (var0 * -0.242878466844559f);
      ACC[127] = ACC[127] + (var0 * 0.0863375216722488f);
      var0 = BC[12544 + var1];
      ACC[2] = ACC[2] + (var0 * 0.03581403195858f);
      ACC[29] = ACC[29] + (var0 * 0.156211987137794f);
      ACC[32] = ACC[32] + (var0 * -0.294383555650711f);
      ACC[34] = ACC[34] + (var0 * 0.198842123150826f);
      ACC[67] = ACC[67] + (var0 * -0.623119711875916f);
      ACC[102] = ACC[102] + (var0 * -0.416635483503342f);
      ACC[112] = ACC[112] + (var0 * 0.130589082837105f);
      var0 = BC[18816 + var1];
      ACC[13] = ACC[13] + (var0 * -0.424048393964767f);
      ACC[35] = ACC[35] + (var0 * -0.595337867736816f);
      ACC[62] = ACC[62] + (var0 * 0.144541963934898f);
      ACC[79] = ACC[79] + (var0 * -0.0863250866532326f);
      var0 = BC[21952 + var1];
      ACC[0] = ACC[0] + (var0 * -0.226990684866905f);
      ACC[6] = ACC[6] + (var0 * 0.138320371508598f);
      ACC[19] = ACC[19] + (var0 * -0.271718353033066f);
      ACC[29] = ACC[29] + (var0 * -0.168388858437538f);
      ACC[31] = ACC[31] + (var0 * 0.187789976596832f);
      ACC[41] = ACC[41] + (var0 * 0.151510894298553f);
      ACC[42] = ACC[42] + (var0 * -0.645048975944519f);
      ACC[43] = ACC[43] + (var0 * -0.667510151863098f);
      ACC[47] = ACC[47] + (var0 * -0.133996516466141f);
      ACC[54] = ACC[54] + (var0 * -0.147358566522598f);
      ACC[60] = ACC[60] + (var0 * -0.225080102682114f);
      ACC[62] = ACC[62] + (var0 * 0.109887577593327f);
      ACC[63] = ACC[63] + (var0 * 0.121927194297314f);
      ACC[65] = ACC[65] + (var0 * 0.143408432602882f);
      ACC[68] = ACC[68] + (var0 * -0.304842680692673f);
      ACC[70] = ACC[70] + (var0 * 0.368258267641068f);
      ACC[74] = ACC[74] + (var0 * 0.162452295422554f);
      ACC[82] = ACC[82] + (var0 * -0.320909351110458f);
      ACC[85] = ACC[85] + (var0 * -0.0613245740532875f);
      ACC[87] = ACC[87] + (var0 * -0.156286284327507f);
      ACC[88] = ACC[88] + (var0 * 0.214202627539635f);
      ACC[98] = ACC[98] + (var0 * 0.37545570731163f);
      ACC[118] = ACC[118] + (var0 * 0.0740496292710304f);
      var0 = BC[25088 + var1];
      ACC[32] = ACC[32] + (var0 * 0.392112761735916f);
      ACC[51] = ACC[51] + (var0 * 0.647566854953766f);
      ACC[76] = ACC[76] + (var0 * 0.405676662921906f);
      ACC[81] = ACC[81] + (var0 * 0.232512876391411f);
      ACC[94] = ACC[94] + (var0 * -0.322737812995911f);
      ACC[100] = ACC[100] + (var0 * 0.264067113399506f);
      ACC[105] = ACC[105] + (var0 * -0.896036028862f);
      ACC[123] = ACC[123] + (var0 * -0.120724149048328f);
      ACC[124] = ACC[124] + (var0 * 0.326840877532959f);
      var0 = BC[28224 + var1];
      ACC[9] = ACC[9] + (var0 * 0.232063770294189f);
      ACC[11] = ACC[11] + (var0 * 0.355417996644974f);
      ACC[38] = ACC[38] + (var0 * 0.0817857161164284f);
      ACC[69] = ACC[69] + (var0 * -0.5205939412117f);
      ACC[75] = ACC[75] + (var0 * 0.180561810731888f);
      ACC[81] = ACC[81] + (var0 * -0.363618731498718f);
      ACC[82] = ACC[82] + (var0 * 0.264695942401886f);
      ACC[83] = ACC[83] + (var0 * 0.560324370861053f);
      ACC[88] = ACC[88] + (var0 * -0.487740248441696f);
      ACC[102] = ACC[102] + (var0 * 0.289517611265182f);
      ACC[106] = ACC[106] + (var0 * 0.162875518202782f);
      ACC[108] = ACC[108] + (var0 * -0.878635823726654f);
      ACC[117] = ACC[117] + (var0 * 0.0526322834193707f);
      var0 = BC[31360 + var1];
      ACC[0] = ACC[0] + (var0 * 0.323564380407333f);
      ACC[3] = ACC[3] + (var0 * -0.625769376754761f);
      ACC[18] = ACC[18] + (var0 * -0.36066722869873f);
      ACC[19] = ACC[19] + (var0 * 0.190646961331367f);
      ACC[29] = ACC[29] + (var0 * -0.181132182478905f);
      ACC[34] = ACC[34] + (var0 * 0.218880236148834f);
      ACC[42] = ACC[42] + (var0 * 0.498578310012817f);
      ACC[43] = ACC[43] + (var0 * 0.333766341209412f);
      ACC[44] = ACC[44] + (var0 * 0.144242703914642f);
      ACC[65] = ACC[65] + (var0 * 0.258445233106613f);
      ACC[76] = ACC[76] + (var0 * 0.367863297462463f);
      ACC[82] = ACC[82] + (var0 * -0.206529915332794f);
      ACC[85] = ACC[85] + (var0 * 0.0286062508821487f);
      ACC[87] = ACC[87] + (var0 * 0.201617762446404f);
      ACC[113] = ACC[113] + (var0 * 0.640139937400818f);
      var0 = BC[34496 + var1];
      ACC[1] = ACC[1] + (var0 * -0.125326946377754f);
      ACC[6] = ACC[6] + (var0 * 0.154665216803551f);
      ACC[8] = ACC[8] + (var0 * -0.356636971235275f);
      ACC[11] = ACC[11] + (var0 * -0.88983017206192f);
      ACC[20] = ACC[20] + (var0 * -0.180022820830345f);
      ACC[29] = ACC[29] + (var0 * 0.371816456317902f);
      ACC[41] = ACC[41] + (var0 * 0.186399832367897f);
      ACC[46] = ACC[46] + (var0 * -0.0376773662865162f);
      ACC[69] = ACC[69] + (var0 * 0.3397336602211f);
      ACC[82] = ACC[82] + (var0 * -0.285410434007645f);
      ACC[83] = ACC[83] + (var0 * -0.521107494831085f);
      ACC[88] = ACC[88] + (var0 * 0.284963339567184f);
      ACC[102] = ACC[102] + (var0 * 0.411858588457108f);
      ACC[108] = ACC[108] + (var0 * 0.348155349493027f);
      ACC[117] = ACC[117] + (var0 * 0.0710639730095863f);
      var0 = BC[37632 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0493137203156948f);
      ACC[29] = ACC[29] + (var0 * 0.232245698571205f);
      ACC[34] = ACC[34] + (var0 * -0.40378275513649f);
      ACC[40] = ACC[40] + (var0 * 0.273029297590256f);
      ACC[52] = ACC[52] + (var0 * -0.196060508489609f);
      ACC[67] = ACC[67] + (var0 * -0.690811574459076f);
      ACC[102] = ACC[102] + (var0 * -0.402235805988312f);
      ACC[112] = ACC[112] + (var0 * 0.181820958852768f);
      var0 = BC[40768 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0335327349603176f);
      ACC[3] = ACC[3] + (var0 * -0.252326369285583f);
      ACC[16] = ACC[16] + (var0 * -0.339854031801224f);
      ACC[18] = ACC[18] + (var0 * -0.301877170801163f);
      ACC[19] = ACC[19] + (var0 * 0.24938029050827f);
      ACC[46] = ACC[46] + (var0 * 0.0599255822598934f);
      ACC[48] = ACC[48] + (var0 * 0.19251324236393f);
      ACC[54] = ACC[54] + (var0 * -0.293663918972015f);
      ACC[60] = ACC[60] + (var0 * -0.340951085090637f);
      ACC[66] = ACC[66] + (var0 * -0.270518958568573f);
      ACC[68] = ACC[68] + (var0 * 0.264188021421432f);
      ACC[70] = ACC[70] + (var0 * -0.224176362156868f);
      ACC[77] = ACC[77] + (var0 * 0.110767520964146f);
      ACC[80] = ACC[80] + (var0 * -0.235269904136658f);
      ACC[86] = ACC[86] + (var0 * -0.0614288188517094f);
      ACC[89] = ACC[89] + (var0 * -0.235178112983704f);
      ACC[92] = ACC[92] + (var0 * 0.337569981813431f);
      ACC[101] = ACC[101] + (var0 * 0.355362594127655f);
      ACC[103] = ACC[103] + (var0 * -0.36416819691658f);
      ACC[112] = ACC[112] + (var0 * 0.38881903886795f);
      ACC[121] = ACC[121] + (var0 * 0.06622314453125f);
      var0 = BC[43904 + var1];
      ACC[13] = ACC[13] + (var0 * 0.303148686885834f);
      ACC[25] = ACC[25] + (var0 * -0.133259475231171f);
      ACC[35] = ACC[35] + (var0 * 0.709863483905792f);
      ACC[44] = ACC[44] + (var0 * 0.484631806612015f);
      ACC[50] = ACC[50] + (var0 * -0.836942493915558f);
      ACC[57] = ACC[57] + (var0 * 0.520862996578217f);
      ACC[94] = ACC[94] + (var0 * 0.423784285783768f);
      ACC[97] = ACC[97] + (var0 * 0.45383757352829f);
      ACC[100] = ACC[100] + (var0 * -0.362840056419373f);
      var0 = BC[47040 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0436064377427101f);
      ACC[4] = ACC[4] + (var0 * 0.664051115512848f);
      ACC[17] = ACC[17] + (var0 * -0.122760161757469f);
      ACC[20] = ACC[20] + (var0 * -0.329096794128418f);
      ACC[27] = ACC[27] + (var0 * -0.133281871676445f);
      ACC[29] = ACC[29] + (var0 * -0.155151158571243f);
      ACC[51] = ACC[51] + (var0 * -0.346999973058701f);
      ACC[52] = ACC[52] + (var0 * 0.193475946784019f);
      ACC[105] = ACC[105] + (var0 * 0.848235845565796f);
      ACC[108] = ACC[108] + (var0 * -0.208351463079453f);
      ACC[124] = ACC[124] + (var0 * -0.264124810695648f);
      var0 = BC[50176 + var1];
      ACC[31] = ACC[31] + (var0 * -0.120474047958851f);
      ACC[62] = ACC[62] + (var0 * 0.227678090333939f);
      ACC[63] = ACC[63] + (var0 * -0.274007350206375f);
      ACC[78] = ACC[78] + (var0 * -0.333335906267166f);
      ACC[85] = ACC[85] + (var0 * -0.185761228203773f);
      ACC[93] = ACC[93] + (var0 * 0.276566028594971f);
      ACC[95] = ACC[95] + (var0 * -0.0904954671859741f);
      ACC[107] = ACC[107] + (var0 * -0.601760983467102f);
      ACC[121] = ACC[121] + (var0 * -0.141128674149513f);
      var0 = BC[53312 + var1];
      ACC[9] = ACC[9] + (var0 * -0.362415611743927f);
      ACC[47] = ACC[47] + (var0 * 0.104587376117706f);
      ACC[48] = ACC[48] + (var0 * -0.493695735931396f);
      ACC[52] = ACC[52] + (var0 * 0.317447036504745f);
      ACC[56] = ACC[56] + (var0 * -0.378887683153152f);
      ACC[59] = ACC[59] + (var0 * 0.277054578065872f);
      ACC[61] = ACC[61] + (var0 * -0.592064261436462f);
      ACC[62] = ACC[62] + (var0 * -0.161849111318588f);
      ACC[63] = ACC[63] + (var0 * -0.18657785654068f);
      ACC[66] = ACC[66] + (var0 * 0.408362150192261f);
      ACC[75] = ACC[75] + (var0 * -0.123270072042942f);
      ACC[81] = ACC[81] + (var0 * 0.71665632724762f);
      ACC[85] = ACC[85] + (var0 * 0.14835686981678f);
      ACC[87] = ACC[87] + (var0 * 0.240195870399475f);
      ACC[88] = ACC[88] + (var0 * 0.239853531122208f);
      ACC[98] = ACC[98] + (var0 * -0.443198561668396f);
      ACC[100] = ACC[100] + (var0 * 0.494406849145889f);
      ACC[104] = ACC[104] + (var0 * 0.191678538918495f);
      ACC[105] = ACC[105] + (var0 * 0.307752013206482f);
      ACC[113] = ACC[113] + (var0 * 0.268037348985672f);
      var0 = BC[56448 + var1];
      ACC[14] = ACC[14] + (var0 * 0.215367868542671f);
      ACC[31] = ACC[31] + (var0 * 0.490748256444931f);
      ACC[53] = ACC[53] + (var0 * -0.368521064519882f);
      ACC[55] = ACC[55] + (var0 * -0.533207833766937f);
      ACC[58] = ACC[58] + (var0 * -0.401687949895859f);
      ACC[62] = ACC[62] + (var0 * 0.223436236381531f);
      ACC[71] = ACC[71] + (var0 * 0.648839890956879f);
      ACC[75] = ACC[75] + (var0 * 0.130156800150871f);
      ACC[92] = ACC[92] + (var0 * 0.308829337358475f);
      ACC[93] = ACC[93] + (var0 * -0.277474462985992f);
      ACC[95] = ACC[95] + (var0 * -0.226775333285332f);
      ACC[121] = ACC[121] + (var0 * 0.271575093269348f);
      var0 = BC[59584 + var1];
      ACC[1] = ACC[1] + (var0 * -0.150161430239677f);
      ACC[2] = ACC[2] + (var0 * 0.0452220514416695f);
      ACC[9] = ACC[9] + (var0 * 0.109259031713009f);
      ACC[10] = ACC[10] + (var0 * -0.364441603422165f);
      ACC[11] = ACC[11] + (var0 * 0.299770414829254f);
      ACC[15] = ACC[15] + (var0 * 0.2818224132061f);
      ACC[21] = ACC[21] + (var0 * 1.20426690578461f);
      ACC[46] = ACC[46] + (var0 * -0.139139845967293f);
      ACC[52] = ACC[52] + (var0 * -0.1998151242733f);
      ACC[69] = ACC[69] + (var0 * -0.224358931183815f);
      ACC[70] = ACC[70] + (var0 * 0.41122704744339f);
      ACC[75] = ACC[75] + (var0 * 0.305293291807175f);
      ACC[80] = ACC[80] + (var0 * -0.15971514582634f);
      ACC[83] = ACC[83] + (var0 * 0.510121583938599f);
      ACC[86] = ACC[86] + (var0 * -0.067366935312748f);
      ACC[88] = ACC[88] + (var0 * -0.251201242208481f);
      ACC[102] = ACC[102] + (var0 * 0.140351578593254f);
      ACC[104] = ACC[104] + (var0 * -0.437153965234756f);
      ACC[106] = ACC[106] + (var0 * -0.179801061749458f);
      ACC[115] = ACC[115] + (var0 * 0.242549508810043f);
      ACC[117] = ACC[117] + (var0 * -0.0753913372755051f);
      ACC[127] = ACC[127] + (var0 * 0.273110777139664f);
      var0 = BC[62720 + var1];
      ACC[13] = ACC[13] + (var0 * -0.422966241836548f);
      ACC[44] = ACC[44] + (var0 * 0.199600279331207f);
      ACC[53] = ACC[53] + (var0 * -0.390959680080414f);
      ACC[62] = ACC[62] + (var0 * -0.147418409585953f);
      ACC[90] = ACC[90] + (var0 * 1.03739750385284f);
      var0 = BC[65856 + var1];
      ACC[2] = ACC[2] + (var0 * 0.130153834819794f);
      ACC[10] = ACC[10] + (var0 * -0.273048520088196f);
      ACC[15] = ACC[15] + (var0 * 0.129829213023186f);
      ACC[17] = ACC[17] + (var0 * -0.0916974395513535f);
      ACC[22] = ACC[22] + (var0 * -0.111750118434429f);
      ACC[29] = ACC[29] + (var0 * -0.179925575852394f);
      ACC[38] = ACC[38] + (var0 * -0.101213231682777f);
      ACC[39] = ACC[39] + (var0 * 0.0558723509311676f);
      ACC[41] = ACC[41] + (var0 * 0.251689285039902f);
      ACC[46] = ACC[46] + (var0 * -0.119453303515911f);
      ACC[65] = ACC[65] + (var0 * 0.208978727459908f);
      ACC[69] = ACC[69] + (var0 * 0.477877467870712f);
      ACC[77] = ACC[77] + (var0 * -0.145789280533791f);
      ACC[80] = ACC[80] + (var0 * -0.174598097801208f);
      ACC[82] = ACC[82] + (var0 * -0.319832116365433f);
      ACC[83] = ACC[83] + (var0 * -0.940069854259491f);
      ACC[86] = ACC[86] + (var0 * -0.0713007524609566f);
      ACC[88] = ACC[88] + (var0 * 0.383137136697769f);
      ACC[91] = ACC[91] + (var0 * -0.679332137107849f);
      ACC[102] = ACC[102] + (var0 * -0.185232445597649f);
      ACC[106] = ACC[106] + (var0 * -0.324790954589844f);
      ACC[108] = ACC[108] + (var0 * 0.310642063617706f);
      ACC[112] = ACC[112] + (var0 * 0.193366840481758f);
      ACC[115] = ACC[115] + (var0 * 0.57325404882431f);
      ACC[117] = ACC[117] + (var0 * -0.0772190764546394f);
      ACC[127] = ACC[127] + (var0 * 0.20828615128994f);
      var0 = BC[68992 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0373551473021507f);
      ACC[29] = ACC[29] + (var0 * 0.249022826552391f);
      ACC[67] = ACC[67] + (var0 * -0.449295252561569f);
      ACC[102] = ACC[102] + (var0 * -0.495599985122681f);
      ACC[112] = ACC[112] + (var0 * 0.145968362689018f);
      ACC[124] = ACC[124] + (var0 * 0.162599459290504f);
      var0 = BC[72128 + var1];
      ACC[15] = ACC[15] + (var0 * -0.28222182393074f);
      ACC[46] = ACC[46] + (var0 * 0.0386285707354546f);
      ACC[102] = ACC[102] + (var0 * -0.231790274381638f);
      ACC[104] = ACC[104] + (var0 * 0.426787137985229f);
      var0 = BC[75264 + var1];
      ACC[17] = ACC[17] + (var0 * 0.135908722877502f);
      ACC[23] = ACC[23] + (var0 * 0.936380624771118f);
      ACC[25] = ACC[25] + (var0 * 0.0970268398523331f);
      ACC[28] = ACC[28] + (var0 * 0.0660359859466553f);
      ACC[44] = ACC[44] + (var0 * 0.183379217982292f);
      ACC[79] = ACC[79] + (var0 * -0.192336544394493f);
      ACC[86] = ACC[86] + (var0 * 0.0790794268250465f);
      ACC[110] = ACC[110] + (var0 * -0.326404541730881f);
      ACC[117] = ACC[117] + (var0 * 0.0280853807926178f);
      ACC[120] = ACC[120] + (var0 * 0.9160236120224f);
      ACC[125] = ACC[125] + (var0 * 0.15105776488781f);
      var0 = BC[78400 + var1];
      ACC[17] = ACC[17] + (var0 * 0.0886573120951653f);
      ACC[49] = ACC[49] + (var0 * -0.677205324172974f);
      ACC[73] = ACC[73] + (var0 * 0.369652032852173f);
      ACC[97] = ACC[97] + (var0 * 0.373376458883286f);
      ACC[111] = ACC[111] + (var0 * -0.138206139206886f);
      ACC[114] = ACC[114] + (var0 * 0.171922281384468f);
      ACC[123] = ACC[123] + (var0 * 0.124017901718616f);
      var0 = BC[81536 + var1];
      ACC[1] = ACC[1] + (var0 * 0.0856532752513885f);
      ACC[4] = ACC[4] + (var0 * 0.442630171775818f);
      ACC[20] = ACC[20] + (var0 * -0.216289654374123f);
      ACC[32] = ACC[32] + (var0 * -0.385448724031448f);
      ACC[34] = ACC[34] + (var0 * 0.373356550931931f);
      ACC[40] = ACC[40] + (var0 * -0.312012791633606f);
      ACC[123] = ACC[123] + (var0 * 0.0817139819264412f);
      var0 = BC[84672 + var1];
      ACC[0] = ACC[0] + (var0 * -0.206785157322884f);
      ACC[3] = ACC[3] + (var0 * 0.325305372476578f);
      ACC[7] = ACC[7] + (var0 * -0.648884832859039f);
      ACC[16] = ACC[16] + (var0 * 0.245057329535484f);
      ACC[18] = ACC[18] + (var0 * 0.525663614273071f);
      ACC[19] = ACC[19] + (var0 * -0.327216595411301f);
      ACC[22] = ACC[22] + (var0 * -0.134090229868889f);
      ACC[26] = ACC[26] + (var0 * -0.173739865422249f);
      ACC[31] = ACC[31] + (var0 * 0.205095201730728f);
      ACC[47] = ACC[47] + (var0 * 0.110391639173031f);
      ACC[48] = ACC[48] + (var0 * -0.226620405912399f);
      ACC[54] = ACC[54] + (var0 * -0.218623623251915f);
      ACC[59] = ACC[59] + (var0 * 0.126996338367462f);
      ACC[66] = ACC[66] + (var0 * 0.505187809467316f);
      ACC[68] = ACC[68] + (var0 * -0.372062772512436f);
      ACC[77] = ACC[77] + (var0 * 0.116433396935463f);
      ACC[80] = ACC[80] + (var0 * -0.246676534414291f);
      ACC[81] = ACC[81] + (var0 * 0.255019217729568f);
      ACC[89] = ACC[89] + (var0 * 0.378760784864426f);
      ACC[101] = ACC[101] + (var0 * -0.302797168493271f);
      ACC[103] = ACC[103] + (var0 * -0.218809247016907f);
      ACC[112] = ACC[112] + (var0 * 0.328772217035294f);
      ACC[113] = ACC[113] + (var0 * -0.175969198346138f);
      ACC[115] = ACC[115] + (var0 * 0.151328235864639f);
      ACC[116] = ACC[116] + (var0 * 0.187199786305428f);
      ACC[121] = ACC[121] + (var0 * -0.0746239647269249f);
      var0 = BC[87808 + var1];
      ACC[9] = ACC[9] + (var0 * 0.152797684073448f);
      ACC[11] = ACC[11] + (var0 * 0.169592559337616f);
      ACC[16] = ACC[16] + (var0 * -0.428816318511963f);
      ACC[59] = ACC[59] + (var0 * 0.149444609880447f);
      ACC[77] = ACC[77] + (var0 * -0.0781474187970161f);
      ACC[88] = ACC[88] + (var0 * -0.159042820334435f);
      ACC[99] = ACC[99] + (var0 * -1.01725316047668f);
      ACC[102] = ACC[102] + (var0 * -0.118773341178894f);
      ACC[108] = ACC[108] + (var0 * -0.315153002738953f);
      ACC[119] = ACC[119] + (var0 * 0.269979536533356f);
      var0 = BC[90944 + var1];
      ACC[3] = ACC[3] + (var0 * 0.331547766923904f);
      ACC[9] = ACC[9] + (var0 * -0.174892365932465f);
      ACC[34] = ACC[34] + (var0 * -0.234169855713844f);
      ACC[38] = ACC[38] + (var0 * -0.114053457975388f);
      ACC[41] = ACC[41] + (var0 * -0.121795997023582f);
      ACC[47] = ACC[47] + (var0 * 0.164706170558929f);
      ACC[52] = ACC[52] + (var0 * 0.217007979750633f);
      ACC[54] = ACC[54] + (var0 * 0.157298758625984f);
      ACC[56] = ACC[56] + (var0 * 0.23263543844223f);
      ACC[59] = ACC[59] + (var0 * -0.216230645775795f);
      ACC[61] = ACC[61] + (var0 * 0.606819570064545f);
      ACC[62] = ACC[62] + (var0 * -0.280783891677856f);
      ACC[63] = ACC[63] + (var0 * 0.134686574339867f);
      ACC[74] = ACC[74] + (var0 * -0.385317027568817f);
      ACC[75] = ACC[75] + (var0 * -0.181286737322807f);
      ACC[76] = ACC[76] + (var0 * -0.47218981385231f);
      ACC[82] = ACC[82] + (var0 * 0.279687792062759f);
      ACC[85] = ACC[85] + (var0 * -0.0537228733301163f);
      ACC[87] = ACC[87] + (var0 * -0.248141840100288f);
      ACC[100] = ACC[100] + (var0 * -0.276043295860291f);
      ACC[101] = ACC[101] + (var0 * 0.330000966787338f);
      ACC[104] = ACC[104] + (var0 * 0.151795938611031f);
      ACC[111] = ACC[111] + (var0 * 0.0789854153990746f);
      ACC[118] = ACC[118] + (var0 * -0.12895068526268f);
      var0 = BC[94080 + var1];
      ACC[15] = ACC[15] + (var0 * -0.283894956111908f);
      ACC[22] = ACC[22] + (var0 * -0.238267377018929f);
      ACC[46] = ACC[46] + (var0 * 0.0886990427970886f);
      ACC[102] = ACC[102] + (var0 * -0.236046642065048f);
      ACC[104] = ACC[104] + (var0 * 0.44253945350647f);
      var0 = BC[97216 + var1];
      ACC[15] = ACC[15] + (var0 * -0.101051665842533f);
      ACC[21] = ACC[21] + (var0 * -0.204131707549095f);
      ACC[46] = ACC[46] + (var0 * 0.0930693969130516f);
      ACC[70] = ACC[70] + (var0 * 0.202942460775375f);
      ACC[96] = ACC[96] + (var0 * -0.472547769546509f);
      ACC[102] = ACC[102] + (var0 * -0.160039290785789f);
      ACC[104] = ACC[104] + (var0 * 0.303378731012344f);
      ACC[125] = ACC[125] + (var0 * 0.187996804714203f);
      var0 = BC[100352 + var1];
      ACC[49] = ACC[49] + (var0 * -0.467469573020935f);
      ACC[73] = ACC[73] + (var0 * 0.753870129585266f);
      ACC[111] = ACC[111] + (var0 * 0.0953035727143288f);
      var0 = BC[103488 + var1];
      ACC[7] = ACC[7] + (var0 * -0.239272087812424f);
      ACC[14] = ACC[14] + (var0 * 0.399930626153946f);
      ACC[28] = ACC[28] + (var0 * 0.0660830363631248f);
      ACC[31] = ACC[31] + (var0 * 0.416904151439667f);
      ACC[41] = ACC[41] + (var0 * -0.162680208683014f);
      ACC[47] = ACC[47] + (var0 * -0.066656582057476f);
      ACC[54] = ACC[54] + (var0 * 0.389821887016296f);
      ACC[58] = ACC[58] + (var0 * -0.481190204620361f);
      ACC[62] = ACC[62] + (var0 * -0.207693934440613f);
      ACC[71] = ACC[71] + (var0 * 0.530808985233307f);
      ACC[75] = ACC[75] + (var0 * -0.164501368999481f);
      ACC[78] = ACC[78] + (var0 * -0.158008456230164f);
      ACC[86] = ACC[86] + (var0 * 0.0634389966726303f);
      ACC[92] = ACC[92] + (var0 * 0.356949537992477f);
      ACC[93] = ACC[93] + (var0 * -0.388464957475662f);
      ACC[95] = ACC[95] + (var0 * -0.206857427954674f);
      ACC[103] = ACC[103] + (var0 * 0.212677732110023f);
      ACC[112] = ACC[112] + (var0 * -0.19268387556076f);
      ACC[116] = ACC[116] + (var0 * 0.317829310894012f);
      ACC[117] = ACC[117] + (var0 * 0.0495656989514828f);
      ACC[118] = ACC[118] + (var0 * 0.0760750025510788f);
      ACC[121] = ACC[121] + (var0 * 0.282703250646591f);
      var0 = BC[106624 + var1];
      ACC[4] = ACC[4] + (var0 * 0.230321541428566f);
      ACC[9] = ACC[9] + (var0 * 0.23267138004303f);
      ACC[18] = ACC[18] + (var0 * 0.17405392229557f);
      ACC[19] = ACC[19] + (var0 * -0.304099172353745f);
      ACC[26] = ACC[26] + (var0 * -0.349805593490601f);
      ACC[33] = ACC[33] + (var0 * -0.41797748208046f);
      ACC[37] = ACC[37] + (var0 * -0.149484008550644f);
      ACC[40] = ACC[40] + (var0 * -0.752811074256897f);
      ACC[47] = ACC[47] + (var0 * -0.12718853354454f);
      ACC[59] = ACC[59] + (var0 * 0.300022423267365f);
      ACC[60] = ACC[60] + (var0 * 0.236547619104385f);
      ACC[82] = ACC[82] + (var0 * 0.149510681629181f);
      ACC[87] = ACC[87] + (var0 * 0.179718062281609f);
      ACC[88] = ACC[88] + (var0 * -0.288659363985062f);
      ACC[89] = ACC[89] + (var0 * 0.377749383449554f);
      ACC[101] = ACC[101] + (var0 * -0.456458359956741f);
      ACC[108] = ACC[108] + (var0 * -0.198009222745895f);
      ACC[120] = ACC[120] + (var0 * -0.259317606687546f);
      ACC[125] = ACC[125] + (var0 * -0.136153131723404f);
      var0 = BC[109760 + var1];
      ACC[2] = ACC[2] + (var0 * 0.029297012835741f);
      ACC[26] = ACC[26] + (var0 * 0.141188517212868f);
      ACC[28] = ACC[28] + (var0 * -0.0951091274619102f);
      ACC[33] = ACC[33] + (var0 * 0.240737408399582f);
      ACC[46] = ACC[46] + (var0 * -0.0788071379065514f);
      ACC[70] = ACC[70] + (var0 * -0.449995696544647f);
      ACC[72] = ACC[72] + (var0 * 1.13931024074554f);
      ACC[106] = ACC[106] + (var0 * -0.134298175573349f);
      ACC[112] = ACC[112] + (var0 * 0.214279428124428f);
      ACC[115] = ACC[115] + (var0 * 0.267979651689529f);
      ACC[117] = ACC[117] + (var0 * -0.0436989367008209f);
      ACC[127] = ACC[127] + (var0 * 0.0968688055872917f);
      var0 = BC[112896 + var1];
      ACC[13] = ACC[13] + (var0 * 0.470927447080612f);
      ACC[25] = ACC[25] + (var0 * 0.143862709403038f);
      ACC[35] = ACC[35] + (var0 * 0.636675715446472f);
      ACC[44] = ACC[44] + (var0 * -0.273730427026749f);
      ACC[50] = ACC[50] + (var0 * -0.710022926330566f);
      ACC[57] = ACC[57] + (var0 * 0.607962548732758f);
      ACC[79] = ACC[79] + (var0 * -0.120921552181244f);
      ACC[90] = ACC[90] + (var0 * -0.36768901348114f);
      ACC[97] = ACC[97] + (var0 * 0.461045503616333f);
      var0 = BC[116032 + var1];
      ACC[8] = ACC[8] + (var0 * 0.252824127674103f);
      ACC[18] = ACC[18] + (var0 * -0.106563374400139f);
      ACC[28] = ACC[28] + (var0 * -0.16593162715435f);
      ACC[41] = ACC[41] + (var0 * 0.302513539791107f);
      ACC[47] = ACC[47] + (var0 * 0.136580646038055f);
      ACC[54] = ACC[54] + (var0 * -0.69706803560257f);
      ACC[74] = ACC[74] + (var0 * 0.481433540582657f);
      ACC[75] = ACC[75] + (var0 * 0.192737907171249f);
      ACC[77] = ACC[77] + (var0 * 0.116342388093472f);
      ACC[86] = ACC[86] + (var0 * -0.131365671753883f);
      ACC[103] = ACC[103] + (var0 * -0.452010750770569f);
      ACC[110] = ACC[110] + (var0 * -0.144252449274063f);
      ACC[112] = ACC[112] + (var0 * 0.255731105804443f);
      ACC[115] = ACC[115] + (var0 * 0.338143020868301f);
      ACC[117] = ACC[117] + (var0 * -0.0807408392429352f);
      ACC[118] = ACC[118] + (var0 * -0.160939127206802f);
      ACC[127] = ACC[127] + (var0 * 0.104405179619789f);
      var0 = BC[119168 + var1];
      ACC[19] = ACC[19] + (var0 * -0.143296495079994f);
      ACC[31] = ACC[31] + (var0 * 0.296046644449234f);
      ACC[34] = ACC[34] + (var0 * -0.259803116321564f);
      ACC[38] = ACC[38] + (var0 * 0.129999220371246f);
      ACC[47] = ACC[47] + (var0 * -0.0854889005422592f);
      ACC[49] = ACC[49] + (var0 * -0.293040543794632f);
      ACC[54] = ACC[54] + (var0 * -0.272898524999619f);
      ACC[56] = ACC[56] + (var0 * 0.203873440623283f);
      ACC[58] = ACC[58] + (var0 * 0.23806095123291f);
      ACC[60] = ACC[60] + (var0 * -0.184878468513489f);
      ACC[63] = ACC[63] + (var0 * 0.381249964237213f);
      ACC[73] = ACC[73] + (var0 * -0.300676286220551f);
      ACC[74] = ACC[74] + (var0 * 0.346368551254272f);
      ACC[75] = ACC[75] + (var0 * 0.206087619066238f);
      ACC[78] = ACC[78] + (var0 * 0.242603421211243f);
      ACC[81] = ACC[81] + (var0 * -0.292531698942184f);
      ACC[87] = ACC[87] + (var0 * -0.203168481588364f);
      ACC[107] = ACC[107] + (var0 * 0.496895432472229f);
      ACC[111] = ACC[111] + (var0 * -0.220978617668152f);
      ACC[116] = ACC[116] + (var0 * -0.367909252643585f);
      ACC[118] = ACC[118] + (var0 * 0.110693827271461f);
      var0 = BC[122304 + var1];
      ACC[22] = ACC[22] + (var0 * -0.320277363061905f);
      ACC[79] = ACC[79] + (var0 * -0.0876072272658348f);
      ACC[96] = ACC[96] + (var0 * -0.986803531646729f);
      ACC[119] = ACC[119] + (var0 * -0.671716272830963f);
      ACC[125] = ACC[125] + (var0 * -0.126292631030083f);
      var0 = BC[125440 + var1];
      ACC[1] = ACC[1] + (var0 * -0.1730986982584f);
      ACC[2] = ACC[2] + (var0 * 0.0605864115059376f);
      ACC[11] = ACC[11] + (var0 * -0.477348953485489f);
      ACC[20] = ACC[20] + (var0 * -0.325396507978439f);
      ACC[27] = ACC[27] + (var0 * 0.235322341322899f);
      ACC[29] = ACC[29] + (var0 * 0.289817929267883f);
      ACC[32] = ACC[32] + (var0 * 0.277400940656662f);
      ACC[38] = ACC[38] + (var0 * 0.0802815705537796f);
      ACC[41] = ACC[41] + (var0 * 0.263588488101959f);
      ACC[43] = ACC[43] + (var0 * -0.30340588092804f);
      ACC[46] = ACC[46] + (var0 * -0.0679684579372406f);
      ACC[51] = ACC[51] + (var0 * -0.308026909828186f);
      ACC[52] = ACC[52] + (var0 * -0.316478401422501f);
      ACC[54] = ACC[54] + (var0 * -0.157777205109596f);
      ACC[64] = ACC[64] + (var0 * -0.0492367520928383f);
      ACC[69] = ACC[69] + (var0 * 0.314788043498993f);
      ACC[76] = ACC[76] + (var0 * -0.355945199728012f);
      ACC[82] = ACC[82] + (var0 * -0.248320698738098f);
      ACC[83] = ACC[83] + (var0 * -0.434726595878601f);
      ACC[88] = ACC[88] + (var0 * 0.321474879980087f);
      ACC[106] = ACC[106] + (var0 * -0.182686135172844f);
      ACC[108] = ACC[108] + (var0 * 0.577985286712646f);
      ACC[112] = ACC[112] + (var0 * 0.148375660181046f);
      ACC[114] = ACC[114] + (var0 * 0.155414491891861f);
      ACC[117] = ACC[117] + (var0 * 0.0543976835906506f);
      var0 = BC[128576 + var1];
      ACC[1] = ACC[1] + (var0 * 0.177751481533051f);
      ACC[2] = ACC[2] + (var0 * -0.0521645247936249f);
      ACC[17] = ACC[17] + (var0 * -0.145765826106071f);
      ACC[29] = ACC[29] + (var0 * -0.303118169307709f);
      ACC[38] = ACC[38] + (var0 * -0.108723059296608f);
      ACC[39] = ACC[39] + (var0 * 0.0813177227973938f);
      ACC[41] = ACC[41] + (var0 * -0.188449278473854f);
      ACC[51] = ACC[51] + (var0 * 0.16056863963604f);
      ACC[65] = ACC[65] + (var0 * -0.228270590305328f);
      ACC[82] = ACC[82] + (var0 * 0.166048720479012f);
      ACC[86] = ACC[86] + (var0 * -0.0613601803779602f);
      ACC[102] = ACC[102] + (var0 * -0.215176209807396f);
      ACC[114] = ACC[114] + (var0 * -0.234216675162315f);
      ACC[118] = ACC[118] + (var0 * -0.0961046889424324f);
      var0 = BC[131712 + var1];
      ACC[6] = ACC[6] + (var0 * 0.131678834557533f);
      ACC[17] = ACC[17] + (var0 * 0.0983353853225708f);
      ACC[31] = ACC[31] + (var0 * -0.377754122018814f);
      ACC[38] = ACC[38] + (var0 * 0.199255704879761f);
      ACC[39] = ACC[39] + (var0 * -0.0292966943234205f);
      ACC[41] = ACC[41] + (var0 * 0.142546996474266f);
      ACC[47] = ACC[47] + (var0 * -0.0843608602881432f);
      ACC[49] = ACC[49] + (var0 * -0.318187177181244f);
      ACC[54] = ACC[54] + (var0 * -0.434850513935089f);
      ACC[55] = ACC[55] + (var0 * 0.57580828666687f);
      ACC[58] = ACC[58] + (var0 * -0.31610831618309f);
      ACC[62] = ACC[62] + (var0 * -0.282114773988724f);
      ACC[63] = ACC[63] + (var0 * -0.0887217745184898f);
      ACC[73] = ACC[73] + (var0 * -0.451115965843201f);
      ACC[74] = ACC[74] + (var0 * 0.323309719562531f);
      ACC[75] = ACC[75] + (var0 * 0.259174823760986f);
      ACC[78] = ACC[78] + (var0 * -0.241572499275208f);
      ACC[93] = ACC[93] + (var0 * 0.288115233182907f);
      ACC[111] = ACC[111] + (var0 * -0.287676841020584f);
      ACC[112] = ACC[112] + (var0 * 0.13728940486908f);
      ACC[114] = ACC[114] + (var0 * 0.257300972938538f);
      ACC[118] = ACC[118] + (var0 * 0.15531350672245f);
      ACC[123] = ACC[123] + (var0 * 0.126253247261047f);
      var0 = BC[134848 + var1];
      ACC[1] = ACC[1] + (var0 * 0.161465376615524f);
      ACC[2] = ACC[2] + (var0 * -0.0475771985948086f);
      ACC[6] = ACC[6] + (var0 * 0.326323688030243f);
      ACC[8] = ACC[8] + (var0 * -0.627608120441437f);
      ACC[9] = ACC[9] + (var0 * 0.117429338395596f);
      ACC[10] = ACC[10] + (var0 * 0.203070446848869f);
      ACC[17] = ACC[17] + (var0 * 0.126577585935593f);
      ACC[28] = ACC[28] + (var0 * 0.100999929010868f);
      ACC[29] = ACC[29] + (var0 * -0.248531937599182f);
      ACC[38] = ACC[38] + (var0 * 0.136641651391983f);
      ACC[39] = ACC[39] + (var0 * -0.0594678446650505f);
      ACC[41] = ACC[41] + (var0 * 0.279626369476318f);
      ACC[47] = ACC[47] + (var0 * -0.330699175596237f);
      ACC[62] = ACC[62] + (var0 * 0.407031089067459f);
      ACC[70] = ACC[70] + (var0 * -0.26206162571907f);
      ACC[77] = ACC[77] + (var0 * -0.136436060070992f);
      ACC[78] = ACC[78] + (var0 * -0.169921025633812f);
      ACC[80] = ACC[80] + (var0 * 0.23800203204155f);
      ACC[85] = ACC[85] + (var0 * -0.0979631766676903f);
      ACC[86] = ACC[86] + (var0 * 0.0550836138427258f);
      ACC[106] = ACC[106] + (var0 * 0.149525016546249f);
      ACC[111] = ACC[111] + (var0 * -0.299359172582626f);
      ACC[112] = ACC[112] + (var0 * -0.187663078308105f);
      ACC[115] = ACC[115] + (var0 * -0.318034917116165f);
      ACC[125] = ACC[125] + (var0 * -0.0584117993712425f);
      ACC[126] = ACC[126] + (var0 * -0.680128276348114f);
      var0 = BC[137984 + var1];
      ACC[5] = ACC[5] + (var0 * -0.527791917324066f);
      ACC[13] = ACC[13] + (var0 * 0.415121287107468f);
      ACC[23] = ACC[23] + (var0 * 0.30983778834343f);
      ACC[50] = ACC[50] + (var0 * 0.600819230079651f);
      ACC[53] = ACC[53] + (var0 * 0.943865716457367f);
      ACC[57] = ACC[57] + (var0 * -0.482265681028366f);
      ACC[62] = ACC[62] + (var0 * -0.121011450886726f);
      ACC[90] = ACC[90] + (var0 * -0.382793068885803f);
      ACC[97] = ACC[97] + (var0 * 0.464247196912766f);
      ACC[107] = ACC[107] + (var0 * 0.480769425630569f);
      ACC[109] = ACC[109] + (var0 * 0.815496683120728f);
      ACC[110] = ACC[110] + (var0 * -0.494015842676163f);
      ACC[120] = ACC[120] + (var0 * -0.330433756113052f);
      var0 = BC[141120 + var1];
      ACC[1] = ACC[1] + (var0 * -0.228863775730133f);
      ACC[2] = ACC[2] + (var0 * 0.123617187142372f);
      ACC[4] = ACC[4] + (var0 * -0.727614760398865f);
      ACC[20] = ACC[20] + (var0 * 0.0784118473529816f);
      ACC[27] = ACC[27] + (var0 * 0.172755494713783f);
      ACC[29] = ACC[29] + (var0 * 0.220757409930229f);
      ACC[32] = ACC[32] + (var0 * 0.24208427965641f);
      ACC[38] = ACC[38] + (var0 * 0.182924956083298f);
      ACC[41] = ACC[41] + (var0 * 0.305137515068054f);
      ACC[45] = ACC[45] + (var0 * -0.263581693172455f);
      ACC[46] = ACC[46] + (var0 * -0.0830069035291672f);
      ACC[52] = ACC[52] + (var0 * -0.447062730789185f);
      ACC[54] = ACC[54] + (var0 * -0.170149326324463f);
      ACC[64] = ACC[64] + (var0 * -0.0834710896015167f);
      ACC[74] = ACC[74] + (var0 * 0.278852522373199f);
      ACC[75] = ACC[75] + (var0 * 0.254267156124115f);
      ACC[112] = ACC[112] + (var0 * 0.26862421631813f);
      ACC[117] = ACC[117] + (var0 * 0.069793164730072f);
      ACC[118] = ACC[118] + (var0 * 0.112700365483761f);
      var0 = BC[144256 + var1];
      ACC[12] = ACC[12] + (var0 * 0.296492487192154f);
      ACC[29] = ACC[29] + (var0 * 0.262644618749619f);
      ACC[32] = ACC[32] + (var0 * 0.144243359565735f);
      ACC[102] = ACC[102] + (var0 * -0.394159525632858f);
      ACC[123] = ACC[123] + (var0 * -0.0842773392796516f);
      var0 = BC[147392 + var1];
      ACC[16] = ACC[16] + (var0 * 0.273180723190308f);
      ACC[18] = ACC[18] + (var0 * -0.172494441270828f);
      ACC[19] = ACC[19] + (var0 * 0.179975792765617f);
      ACC[42] = ACC[42] + (var0 * 0.373371034860611f);
      ACC[54] = ACC[54] + (var0 * -0.137738808989525f);
      ACC[60] = ACC[60] + (var0 * -0.159177541732788f);
      ACC[65] = ACC[65] + (var0 * -0.13147346675396f);
      ACC[66] = ACC[66] + (var0 * -0.234941750764847f);
      ACC[68] = ACC[68] + (var0 * 0.250106990337372f);
      ACC[77] = ACC[77] + (var0 * 0.0934428870677948f);
      ACC[79] = ACC[79] + (var0 * -0.198241025209427f);
      ACC[92] = ACC[92] + (var0 * 0.216196969151497f);
      ACC[94] = ACC[94] + (var0 * -0.570418477058411f);
      ACC[95] = ACC[95] + (var0 * -0.104502946138382f);
      ACC[121] = ACC[121] + (var0 * 0.0516048520803452f);
      ACC[125] = ACC[125] + (var0 * 0.222742661833763f);
      var0 = BC[150528 + var1];
      ACC[24] = ACC[24] + (var0 * 0.833234071731567f);
      ACC[25] = ACC[25] + (var0 * -0.124322928488255f);
      ACC[30] = ACC[30] + (var0 * -1.35094046592712f);
      ACC[44] = ACC[44] + (var0 * 0.377302050590515f);
      ACC[94] = ACC[94] + (var0 * 0.45899161696434f);
      ACC[100] = ACC[100] + (var0 * -0.579718172550201f);
      var0 = BC[153664 + var1];
      ACC[17] = ACC[17] + (var0 * -0.0805901437997818f);
      ACC[28] = ACC[28] + (var0 * -0.0677271261811256f);
      ACC[38] = ACC[38] + (var0 * -0.117671206593513f);
      ACC[47] = ACC[47] + (var0 * -0.0536883771419525f);
      ACC[65] = ACC[65] + (var0 * 0.156129881739616f);
      ACC[69] = ACC[69] + (var0 * -0.296284765005112f);
      ACC[82] = ACC[82] + (var0 * 0.248013660311699f);
      ACC[86] = ACC[86] + (var0 * -0.0688654705882072f);
      ACC[88] = ACC[88] + (var0 * -0.154723331332207f);
      ACC[102] = ACC[102] + (var0 * -0.28598752617836f);
      var0 = BC[156800 + var1];
      ACC[6] = ACC[6] + (var0 * 0.171482250094414f);
      ACC[19] = ACC[19] + (var0 * 0.155769422650337f);
      ACC[34] = ACC[34] + (var0 * 0.249934956431389f);
      ACC[43] = ACC[43] + (var0 * 0.289702147245407f);
      ACC[47] = ACC[47] + (var0 * -0.0490927435457706f);
      ACC[48] = ACC[48] + (var0 * -0.274942189455032f);
      ACC[49] = ACC[49] + (var0 * -0.482138991355896f);
      ACC[54] = ACC[54] + (var0 * -0.218191727995872f);
      ACC[56] = ACC[56] + (var0 * -0.295826196670532f);
      ACC[60] = ACC[60] + (var0 * 0.193909496068954f);
      ACC[73] = ACC[73] + (var0 * -0.413653075695038f);
      ACC[75] = ACC[75] + (var0 * 0.16044457256794f);
      ACC[81] = ACC[81] + (var0 * 0.285038441419601f);
      ACC[85] = ACC[85] + (var0 * 0.149419605731964f);
      ACC[87] = ACC[87] + (var0 * 0.324552774429321f);
      ACC[95] = ACC[95] + (var0 * 0.113498814404011f);
      ACC[111] = ACC[111] + (var0 * -0.175161182880402f);
      ACC[121] = ACC[121] + (var0 * 0.126231536269188f);
      var0 = BC[159936 + var1];
      ACC[11] = ACC[11] + (var0 * -0.209272712469101f);
      ACC[16] = ACC[16] + (var0 * -0.475547164678574f);
      ACC[65] = ACC[65] + (var0 * 0.650426149368286f);
      ACC[70] = ACC[70] + (var0 * 0.425947964191437f);
      ACC[82] = ACC[82] + (var0 * -0.135972052812576f);
      var0 = BC[163072 + var1];
      ACC[25] = ACC[25] + (var0 * -0.0401646792888641f);
      ACC[26] = ACC[26] + (var0 * 0.230681255459785f);
      ACC[33] = ACC[33] + (var0 * 0.418157786130905f);
      ACC[36] = ACC[36] + (var0 * -1.11366093158722f);
      ACC[37] = ACC[37] + (var0 * 0.0977543443441391f);
      ACC[60] = ACC[60] + (var0 * -0.325763732194901f);
      ACC[66] = ACC[66] + (var0 * -0.429837584495544f);
      ACC[76] = ACC[76] + (var0 * -0.210085734724998f);
      ACC[85] = ACC[85] + (var0 * -0.0548508651554585f);
      ACC[88] = ACC[88] + (var0 * -0.186042547225952f);
      ACC[89] = ACC[89] + (var0 * -0.301038265228271f);
      ACC[101] = ACC[101] + (var0 * 0.348060220479965f);
      ACC[108] = ACC[108] + (var0 * -0.155960008502007f);
      ACC[116] = ACC[116] + (var0 * -0.213165178894997f);
      ACC[119] = ACC[119] + (var0 * 0.374399751424789f);
      var0 = BC[166208 + var1];
      ACC[13] = ACC[13] + (var0 * -0.309804618358612f);
      ACC[23] = ACC[23] + (var0 * -0.426818609237671f);
      ACC[50] = ACC[50] + (var0 * -0.288909375667572f);
      ACC[57] = ACC[57] + (var0 * 0.232232645153999f);
      ACC[110] = ACC[110] + (var0 * 0.427738755941391f);
      var0 = BC[172480 + var1];
      ACC[1] = ACC[1] + (var0 * -0.166587755084038f);
      ACC[2] = ACC[2] + (var0 * 0.0996415987610817f);
      ACC[9] = ACC[9] + (var0 * 0.192917570471764f);
      ACC[11] = ACC[11] + (var0 * 0.634382963180542f);
      ACC[20] = ACC[20] + (var0 * -0.145936504006386f);
      ACC[27] = ACC[27] + (var0 * 0.11957474052906f);
      ACC[29] = ACC[29] + (var0 * -0.246689781546593f);
      ACC[46] = ACC[46] + (var0 * -0.0803070291876793f);
      ACC[52] = ACC[52] + (var0 * -0.326476693153381f);
      ACC[60] = ACC[60] + (var0 * -0.217782840132713f);
      ACC[64] = ACC[64] + (var0 * -0.0768745094537735f);
      ACC[67] = ACC[67] + (var0 * -0.53100997209549f);
      ACC[69] = ACC[69] + (var0 * -0.441229075193405f);
      ACC[75] = ACC[75] + (var0 * 0.214505732059479f);
      ACC[88] = ACC[88] + (var0 * -0.240973442792892f);
      ACC[91] = ACC[91] + (var0 * -0.178309544920921f);
      ACC[108] = ACC[108] + (var0 * -0.637719690799713f);
      ACC[117] = ACC[117] + (var0 * 0.0554053969681263f);
      var0 = BC[175616 + var1];
      ACC[17] = ACC[17] + (var0 * 0.192046865820885f);
      ACC[38] = ACC[38] + (var0 * 0.155439496040344f);
      ACC[39] = ACC[39] + (var0 * -0.0474850013852119f);
      ACC[41] = ACC[41] + (var0 * 0.118805676698685f);
      ACC[54] = ACC[54] + (var0 * -0.230302467942238f);
      ACC[73] = ACC[73] + (var0 * -0.223868027329445f);
      ACC[78] = ACC[78] + (var0 * 0.245186969637871f);
      ACC[85] = ACC[85] + (var0 * 0.0698355436325073f);
      ACC[112] = ACC[112] + (var0 * 0.19773705303669f);
      ACC[114] = ACC[114] + (var0 * 0.568696916103363f);
      ACC[118] = ACC[118] + (var0 * 0.117811843752861f);
      ACC[123] = ACC[123] + (var0 * 0.256995618343353f);
      var0 = BC[178752 + var1];
      ACC[12] = ACC[12] + (var0 * -0.66184276342392f);
      ACC[32] = ACC[32] + (var0 * -0.339327663183212f);
      ACC[42] = ACC[42] + (var0 * -0.292995512485504f);
      ACC[51] = ACC[51] + (var0 * 0.206165939569473f);
      ACC[52] = ACC[52] + (var0 * 0.167882695794106f);
      ACC[98] = ACC[98] + (var0 * 0.405747920274734f);
      ACC[102] = ACC[102] + (var0 * -0.212453186511993f);
      ACC[105] = ACC[105] + (var0 * -0.581772029399872f);
      ACC[123] = ACC[123] + (var0 * 0.0856515169143677f);
      var0 = BC[181888 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0438961759209633f);
      ACC[22] = ACC[22] + (var0 * -0.203265115618706f);
      ACC[26] = ACC[26] + (var0 * -0.21282434463501f);
      ACC[28] = ACC[28] + (var0 * -0.0840817168354988f);
      ACC[33] = ACC[33] + (var0 * -0.327432304620743f);
      ACC[54] = ACC[54] + (var0 * -0.231844514608383f);
      ACC[60] = ACC[60] + (var0 * 0.250185817480087f);
      ACC[72] = ACC[72] + (var0 * 0.730958819389343f);
      ACC[86] = ACC[86] + (var0 * -0.0999222323298454f);
      ACC[88] = ACC[88] + (var0 * 0.133857443928719f);
      ACC[92] = ACC[92] + (var0 * -0.365336835384369f);
      ACC[103] = ACC[103] + (var0 * -0.251170128583908f);
      ACC[112] = ACC[112] + (var0 * 0.251774162054062f);
      ACC[113] = ACC[113] + (var0 * -0.285450756549835f);
      ACC[117] = ACC[117] + (var0 * -0.0650600790977478f);
      ACC[125] = ACC[125] + (var0 * -0.286168873310089f);
      var0 = BC[185024 + var1];
      ACC[15] = ACC[15] + (var0 * -0.239275574684143f);
      ACC[22] = ACC[22] + (var0 * -0.11259913444519f);
      ACC[46] = ACC[46] + (var0 * 0.10714278370142f);
      ACC[102] = ACC[102] + (var0 * -0.21065329015255f);
      ACC[104] = ACC[104] + (var0 * 0.496720850467682f);
      var0 = BC[188160 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0631539598107338f);
      ACC[9] = ACC[9] + (var0 * 0.338453590869904f);
      ACC[22] = ACC[22] + (var0 * 0.151221990585327f);
      ACC[29] = ACC[29] + (var0 * -0.270052164793015f);
      ACC[31] = ACC[31] + (var0 * -0.112145163118839f);
      ACC[41] = ACC[41] + (var0 * 0.278585344552994f);
      ACC[52] = ACC[52] + (var0 * -0.151544839143753f);
      ACC[54] = ACC[54] + (var0 * -0.256228685379028f);
      ACC[63] = ACC[63] + (var0 * -0.10051341354847f);
      ACC[74] = ACC[74] + (var0 * 0.488325476646423f);
      ACC[77] = ACC[77] + (var0 * 0.102604404091835f);
      ACC[78] = ACC[78] + (var0 * -0.249868303537369f);
      ACC[80] = ACC[80] + (var0 * -0.260959833860397f);
      ACC[88] = ACC[88] + (var0 * 0.177838280797005f);
      ACC[103] = ACC[103] + (var0 * -0.263791531324387f);
      ACC[111] = ACC[111] + (var0 * -0.110989592969418f);
      ACC[112] = ACC[112] + (var0 * 0.362614333629608f);
      ACC[115] = ACC[115] + (var0 * 0.72716611623764f);
      var0 = BC[191296 + var1];
      ACC[2] = ACC[2] + (var0 * -0.0780935287475586f);
      ACC[6] = ACC[6] + (var0 * 0.126294687390327f);
      ACC[10] = ACC[10] + (var0 * 0.252809673547745f);
      ACC[15] = ACC[15] + (var0 * -0.360209763050079f);
      ACC[21] = ACC[21] + (var0 * 0.68241560459137f);
      ACC[29] = ACC[29] + (var0 * -0.184792086482048f);
      ACC[41] = ACC[41] + (var0 * -0.108889423310757f);
      ACC[46] = ACC[46] + (var0 * 0.127455517649651f);
      ACC[52] = ACC[52] + (var0 * 0.161523371934891f);
      ACC[54] = ACC[54] + (var0 * 0.131352767348289f);
      ACC[64] = ACC[64] + (var0 * -0.0407001003623009f);
      ACC[69] = ACC[69] + (var0 * 0.188429787755013f);
      ACC[75] = ACC[75] + (var0 * -0.196686387062073f);
      ACC[77] = ACC[77] + (var0 * 0.223037257790565f);
      ACC[83] = ACC[83] + (var0 * -0.480060815811157f);
      ACC[88] = ACC[88] + (var0 * 0.145014822483063f);
      ACC[91] = ACC[91] + (var0 * -0.392141938209534f);
      ACC[104] = ACC[104] + (var0 * -0.343649476766586f);
      ACC[117] = ACC[117] + (var0 * 0.0757709890604019f);
      ACC[127] = ACC[127] + (var0 * -0.275114625692368f);
      var0 = BC[194432 + var1];
      ACC[2] = ACC[2] + (var0 * 0.0204660072922707f);
      ACC[6] = ACC[6] + (var0 * -0.273776143789291f);
      ACC[7] = ACC[7] + (var0 * 0.17250719666481f);
      ACC[21] = ACC[21] + (var0 * 0.798361122608185f);
      ACC[28] = ACC[28] + (var0 * -0.0888344347476959f);
      ACC[29] = ACC[29] + (var0 * 0.358373403549194f);
      ACC[38] = ACC[38] + (var0 * -0.0831105411052704f);
      ACC[52] = ACC[52] + (var0 * -0.343152910470963f);
      ACC[54] = ACC[54] + (var0 * -0.224266335368156f);
      ACC[64] = ACC[64] + (var0 * 0.0805855914950371f);
      ACC[69] = ACC[69] + (var0 * -0.513691544532776f);
      ACC[75] = ACC[75] + (var0 * 0.295544773340225f);
      ACC[80] = ACC[80] + (var0 * -0.149710655212402f);
      ACC[81] = ACC[81] + (var0 * -0.262246400117874f);
      ACC[82] = ACC[82] + (var0 * 0.318552941083908f);
      ACC[83] = ACC[83] + (var0 * 1.24305057525635f);
      ACC[86] = ACC[86] + (var0 * -0.0638187900185585f);
      ACC[88] = ACC[88] + (var0 * -0.435984313488007f);
      ACC[91] = ACC[91] + (var0 * 0.567946255207062f);
      ACC[102] = ACC[102] + (var0 * -0.17689636349678f);
      ACC[108] = ACC[108] + (var0 * -0.334900289773941f);
      ACC[112] = ACC[112] + (var0 * 0.309256911277771f);
      ACC[117] = ACC[117] + (var0 * -0.0725774690508842f);
      ACC[127] = ACC[127] + (var0 * 0.223883956670761f);
      var0 = BC[197568 + var1];
      ACC[1] = ACC[1] + (var0 * 0.131517961621284f);
      ACC[17] = ACC[17] + (var0 * -0.078723706305027f);
      ACC[28] = ACC[28] + (var0 * -0.0854452922940254f);
      ACC[39] = ACC[39] + (var0 * 0.0888784900307655f);
      ACC[69] = ACC[69] + (var0 * 0.17898778617382f);
      ACC[82] = ACC[82] + (var0 * -0.197493180632591f);
      ACC[86] = ACC[86] + (var0 * -0.0513238161802292f);
      ACC[88] = ACC[88] + (var0 * 0.220119342207909f);
      ACC[102] = ACC[102] + (var0 * -0.353951692581177f);
      ACC[118] = ACC[118] + (var0 * -0.105916537344456f);
      AC[0 + var1] = max_f(ACC[0] + 3.97774410247803f, 0.0f);
      AC[3136 + var1] = max_f(ACC[1] + 6.53045177459717f, 0.0f);
      AC[6272 + var1] = max_f(ACC[2] + 0.689180612564087f, 0.0f);
      AC[9408 + var1] = max_f(ACC[3] + 1.93617045879364f, 0.0f);
      AC[12544 + var1] = max_f(ACC[4] + -3.67652225494385f, 0.0f);
      AC[15680 + var1] = max_f(ACC[5] + 5.39940929412842f, 0.0f);
      AC[18816 + var1] = max_f(ACC[6] + 2.34349393844604f, 0.0f);
      AC[21952 + var1] = max_f(ACC[7] + 4.98212814331055f, 0.0f);
      AC[25088 + var1] = max_f(ACC[8] + -0.949707210063934f, 0.0f);
      AC[28224 + var1] = max_f(ACC[9] + -0.841366529464722f, 0.0f);
      AC[31360 + var1] = max_f(ACC[10] + 10.7177085876465f, 0.0f);
      AC[34496 + var1] = max_f(ACC[11] + -0.698113620281219f, 0.0f);
      AC[37632 + var1] = max_f(ACC[12] + 2.94730615615845f, 0.0f);
      AC[40768 + var1] = max_f(ACC[13] + -1.62456035614014f, 0.0f);
      AC[43904 + var1] = max_f(ACC[14] + 0.0610711574554443f, 0.0f);
      AC[47040 + var1] = max_f(ACC[15] + -2.68517446517944f, 0.0f);
      AC[50176 + var1] = max_f(ACC[16] + 2.95325136184692f, 0.0f);
      AC[53312 + var1] = max_f(ACC[17] + 2.90872311592102f, 0.0f);
      AC[56448 + var1] = max_f(ACC[18] + 0.585728049278259f, 0.0f);
      AC[59584 + var1] = max_f(ACC[19] + 2.46107268333435f, 0.0f);
      AC[62720 + var1] = max_f(ACC[20] + 5.15319061279297f, 0.0f);
      AC[65856 + var1] = max_f(ACC[21] + -21.5983295440674f, 0.0f);
      AC[68992 + var1] = max_f(ACC[22] + 6.76912784576416f, 0.0f);
      AC[72128 + var1] = max_f(ACC[23] + -1.43688929080963f, 0.0f);
      AC[75264 + var1] = max_f(ACC[24] + -2.44151854515076f, 0.0f);
      AC[78400 + var1] = max_f(ACC[25] + 2.38876342773438f, 0.0f);
      AC[81536 + var1] = max_f(ACC[26] + 4.23959064483643f, 0.0f);
      AC[84672 + var1] = max_f(ACC[27] + 1.74140977859497f, 0.0f);
      AC[87808 + var1] = max_f(ACC[28] + 4.02036380767822f, 0.0f);
      AC[90944 + var1] = max_f(ACC[29] + 3.30771112442017f, 0.0f);
      AC[94080 + var1] = max_f(ACC[30] + 1.83186113834381f, 0.0f);
      AC[97216 + var1] = max_f(ACC[31] + -3.47192811965942f, 0.0f);
      AC[100352 + var1] = max_f(ACC[32] + 1.40292310714722f, 0.0f);
      AC[103488 + var1] = max_f(ACC[33] + 2.0068154335022f, 0.0f);
      AC[106624 + var1] = max_f(ACC[34] + 0.921865403652191f, 0.0f);
      AC[109760 + var1] = max_f(ACC[35] + -6.02709341049194f, 0.0f);
      AC[112896 + var1] = max_f(ACC[36] + 3.36143183708191f, 0.0f);
      AC[116032 + var1] = max_f(ACC[37] + 2.80955386161804f, 0.0f);
      AC[119168 + var1] = max_f(ACC[38] + 3.40346097946167f, 0.0f);
      AC[122304 + var1] = max_f(ACC[39] + 8.10543251037598f, 0.0f);
      AC[125440 + var1] = max_f(ACC[40] + 3.81456136703491f, 0.0f);
      AC[128576 + var1] = max_f(ACC[41] + -7.17782020568848f, 0.0f);
      AC[131712 + var1] = max_f(ACC[42] + 1.08472454547882f, 0.0f);
      AC[134848 + var1] = max_f(ACC[43] + 1.51909649372101f, 0.0f);
      AC[137984 + var1] = max_f(ACC[44] + -1.17343831062317f, 0.0f);
      AC[141120 + var1] = max_f(ACC[45] + 0.0757726430892944f, 0.0f);
      AC[144256 + var1] = max_f(ACC[46] + 7.68193483352661f, 0.0f);
      AC[147392 + var1] = max_f(ACC[47] + 4.0016622543335f, 0.0f);
      AC[150528 + var1] = max_f(ACC[48] + 4.76180458068848f, 0.0f);
      AC[153664 + var1] = max_f(ACC[49] + 8.2471170425415f, 0.0f);
      AC[156800 + var1] = max_f(ACC[50] + 10.8935298919678f, 0.0f);
      AC[159936 + var1] = max_f(ACC[51] + 1.53081250190735f, 0.0f);
      AC[163072 + var1] = max_f(ACC[52] + 5.96528673171997f, 0.0f);
      AC[166208 + var1] = max_f(ACC[53] + 2.22227907180786f, 0.0f);
      AC[169344 + var1] = max_f(ACC[54] + 16.0719985961914f, 0.0f);
      AC[172480 + var1] = max_f(ACC[55] + 4.40592002868652f, 0.0f);
      AC[175616 + var1] = max_f(ACC[56] + 3.53694009780884f, 0.0f);
      AC[178752 + var1] = max_f(ACC[57] + -6.2826099395752f, 0.0f);
      AC[181888 + var1] = max_f(ACC[58] + 4.73091316223145f, 0.0f);
      AC[185024 + var1] = max_f(ACC[59] + 0.800605058670044f, 0.0f);
      AC[188160 + var1] = max_f(ACC[60] + 4.38815069198608f, 0.0f);
      AC[191296 + var1] = max_f(ACC[61] + 2.31286144256592f, 0.0f);
      AC[194432 + var1] = max_f(ACC[62] + 4.07289695739746f, 0.0f);
      AC[197568 + var1] = max_f(ACC[63] + 4.28379535675049f, 0.0f);
      AC[200704 + var1] = max_f(ACC[64] + 3.16218090057373f, 0.0f);
      AC[203840 + var1] = max_f(ACC[65] + -2.58234548568726f, 0.0f);
      AC[206976 + var1] = max_f(ACC[66] + -2.7919135093689f, 0.0f);
      AC[210112 + var1] = max_f(ACC[67] + 1.73715841770172f, 0.0f);
      AC[213248 + var1] = max_f(ACC[68] + 3.18482828140259f, 0.0f);
      AC[216384 + var1] = max_f(ACC[69] + -0.249441385269165f, 0.0f);
      AC[219520 + var1] = max_f(ACC[70] + 0.0144340991973877f, 0.0f);
      AC[222656 + var1] = max_f(ACC[71] + -2.94003796577454f, 0.0f);
      AC[225792 + var1] = max_f(ACC[72] + -9.41513252258301f, 0.0f);
      AC[228928 + var1] = max_f(ACC[73] + -3.1973352432251f, 0.0f);
      AC[232064 + var1] = max_f(ACC[74] + -5.67008066177368f, 0.0f);
      AC[235200 + var1] = max_f(ACC[75] + -6.30630779266357f, 0.0f);
      AC[238336 + var1] = max_f(ACC[76] + 1.83989608287811f, 0.0f);
      AC[241472 + var1] = max_f(ACC[77] + 1.70226573944092f, 0.0f);
      AC[244608 + var1] = max_f(ACC[78] + 5.37326335906982f, 0.0f);
      AC[247744 + var1] = max_f(ACC[79] + 4.75103092193604f, 0.0f);
      AC[250880 + var1] = max_f(ACC[80] + 11.0786228179932f, 0.0f);
      AC[254016 + var1] = max_f(ACC[81] + -2.08528780937195f, 0.0f);
      AC[257152 + var1] = max_f(ACC[82] + 8.10121631622314f, 0.0f);
      AC[260288 + var1] = max_f(ACC[83] + 6.3770580291748f, 0.0f);
      AC[263424 + var1] = max_f(ACC[84] + 2.30626821517944f, 0.0f);
      AC[266560 + var1] = max_f(ACC[85] + 2.43514847755432f, 0.0f);
      AC[269696 + var1] = max_f(ACC[86] + 5.16119861602783f, 0.0f);
      AC[272832 + var1] = max_f(ACC[87] + 3.16917514801025f, 0.0f);
      AC[275968 + var1] = max_f(ACC[88] + 0.501362562179565f, 0.0f);
      AC[279104 + var1] = max_f(ACC[89] + -0.371479392051697f, 0.0f);
      AC[282240 + var1] = max_f(ACC[90] + 3.21858835220337f, 0.0f);
      AC[285376 + var1] = max_f(ACC[91] + 15.2057437896729f, 0.0f);
      AC[288512 + var1] = max_f(ACC[92] + -2.09268856048584f, 0.0f);
      AC[291648 + var1] = max_f(ACC[93] + 3.27589416503906f, 0.0f);
      AC[294784 + var1] = max_f(ACC[94] + -1.75040054321289f, 0.0f);
      AC[297920 + var1] = max_f(ACC[95] + 5.13914966583252f, 0.0f);
      AC[301056 + var1] = max_f(ACC[96] + 3.60483002662659f, 0.0f);
      AC[304192 + var1] = max_f(ACC[97] + -5.72263526916504f, 0.0f);
      AC[307328 + var1] = max_f(ACC[98] + 2.104572057724f, 0.0f);
      AC[310464 + var1] = max_f(ACC[99] + 2.86681413650513f, 0.0f);
      AC[313600 + var1] = max_f(ACC[100] + -0.169701159000397f, 0.0f);
      AC[316736 + var1] = max_f(ACC[101] + -0.232803612947464f, 0.0f);
      AC[319872 + var1] = max_f(ACC[102] + 11.1465425491333f, 0.0f);
      AC[323008 + var1] = max_f(ACC[103] + 9.82546234130859f, 0.0f);
      AC[326144 + var1] = max_f(ACC[104] + 2.92630648612976f, 0.0f);
      AC[329280 + var1] = max_f(ACC[105] + 2.70706009864807f, 0.0f);
      AC[332416 + var1] = max_f(ACC[106] + 10.8343048095703f, 0.0f);
      AC[335552 + var1] = max_f(ACC[107] + 2.30224275588989f, 0.0f);
      AC[338688 + var1] = max_f(ACC[108] + -1.31212592124939f, 0.0f);
      AC[341824 + var1] = max_f(ACC[109] + 1.02813601493835f, 0.0f);
      AC[344960 + var1] = max_f(ACC[110] + 4.57143783569336f, 0.0f);
      AC[348096 + var1] = max_f(ACC[111] + 6.4234733581543f, 0.0f);
      AC[351232 + var1] = max_f(ACC[112] + -14.0353059768677f, 0.0f);
      AC[354368 + var1] = max_f(ACC[113] + 1.16353583335876f, 0.0f);
      AC[357504 + var1] = max_f(ACC[114] + 0.11034631729126f, 0.0f);
      AC[360640 + var1] = max_f(ACC[115] + -16.2693405151367f, 0.0f);
      AC[363776 + var1] = max_f(ACC[116] + 1.27645993232727f, 0.0f);
      AC[366912 + var1] = max_f(ACC[117] + 5.10857009887695f, 0.0f);
      AC[370048 + var1] = max_f(ACC[118] + 2.34542512893677f, 0.0f);
      AC[373184 + var1] = max_f(ACC[119] + 1.92306780815125f, 0.0f);
      AC[376320 + var1] = max_f(ACC[120] + 0.966526746749878f, 0.0f);
      AC[379456 + var1] = max_f(ACC[121] + 1.03472030162811f, 0.0f);
      AC[382592 + var1] = max_f(ACC[122] + 1.88352596759796f, 0.0f);
      AC[385728 + var1] = max_f(ACC[123] + 0.812464356422424f, 0.0f);
      AC[388864 + var1] = max_f(ACC[124] + 1.282674908638f, 0.0f);
      AC[392000 + var1] = max_f(ACC[125] + 3.50683999061584f, 0.0f);
      AC[395136 + var1] = max_f(ACC[126] + 4.64868974685669f, 0.0f);
      AC[398272 + var1] = max_f(ACC[127] + -5.83540630340576f, 0.0f);
    } else {
      for (int var3 = 0; var3 < 64; var3 = var3 + 1) {
        int var4 = offsets[2 * (0 + var3)];
        int var5 = offsets[(2 * (0 + var3)) + 1];
        if (var4 != var5) {
          var0 = BC[(var3 * 3136) + var1];
        } 
        for (int var6 = var4; var6 < var5; var6 = var6 + 1) {
          int var7 = AB.row_val[var6];
          smem[((128 * threadIdx.y) + var7) - 128] = smem[((128 * threadIdx.y) + var7) - 128] + (var0 * AB.values[var6]);
        }
      }
      for (int var8 = 128; var8 < 128; var8 = var8 + 1) {
        AC[(var8 * 3136) + var1] = max_f(smem[(128 * threadIdx.y) + (var8 - 128)] + bias[var8], 0.0);
      }
    }
  }
}
